// Textos rom√°nticos para cada imagen del cuento
const textos = [
    "Yo quiero que seas como Cenicienta, mi princesa de los cuentos de hadas",
    "Ser aquel que ponga en tu pie, la zapatilla de cristal del amor eterno",
    "Como un cuento de hadas, te quiero contar todo lo que siento por ti",
    "Esa mirada dulce y m√°gica a m√≠ me congela el coraz√≥n de amor",
    "Quisiera ser el genio que concede todos tus deseos y sue√±os",
    "Yo quiero que t√∫ seas mi princesa, que t√∫ seas la bella y yo la bestia que se transforma con tu amor",
    "Y solo con tus besos me iluminas y me llenas de felicidad infinita",
    "Y que despiertes de tus sue√±os solo con mis besos de amor verdadero",
    "¬øQuieres saber qu√© pas√≥ recorriendo otros reinos? Todo lo hice por ti, mi amor",
    "En cada viaje que emprendo, llevo tu recuerdo como mi tesoro m√°s preciado",
    "Cada lugar que visito, cada aventura que vivo, es un regalo que preparo para ti",
    "Aunque estemos separados por la distancia, mi coraz√≥n viaja contigo en cada paso",
    "¬øQuieres conocer todos los lugares que he recorrido pensando en ti? Todo lo hice por amor"
];

// Elementos del DOM
const descripcion = document.getElementById('descripcion-text');
const descripcion_a = document.getElementById('descripcion-text-a');
const ourSpace = document.getElementById('our_space');

// Variables globales para los audios
let audioCuento = null;
let audioPienso = null;
let btnCuento = null;
let btnPienso = null;

// Funci√≥n para actualizar los indicadores del carrusel
function updateCarouselIndicators(activeIndex) {
    const indicators = document.querySelectorAll('.carousel-indicators button');
    indicators.forEach((indicator, index) => {
        if (index === activeIndex) {
            indicator.classList.add('active');
        } else {
            indicator.classList.remove('active');
        }
    });
}

// Funci√≥n para detener todos los audios
function stopAllAudios() {
    if (audioCuento && !audioCuento.paused) {
        audioCuento.pause();
        audioCuento.currentTime = 0;
        btnCuento.innerHTML = '‚ñ∂Ô∏è Cu√©ntame la Historia';
        btnCuento.style.background = 'linear-gradient(45deg, #DC2626, #B91C1C)';
    }
    
    if (audioPienso && !audioPienso.paused) {
        audioPienso.pause();
        audioPienso.currentTime = 0;
        btnPienso.innerHTML = 'üíù ¬øQu√© Significas para M√≠?';
        btnPienso.style.background = 'linear-gradient(45deg, #3B82F6, #1D4ED8)';
    }
}

// Funci√≥n para cambiar el texto de acuerdo a la imagen activa
document.getElementById('carouselExampleAutoplaying').addEventListener('slide.bs.carousel', function (event) {
    // Obtener el √≠ndice de la imagen activa
    let index = event.to;
    
    console.log('üé† Carrusel cambiando a √≠ndice:', index, 'Total de textos:', textos.length);
    
    // Aseg√∫rate de que el √≠ndice est√© dentro del rango correcto
    if (index >= textos.length) {
        console.log('‚ö†Ô∏è √çndice fuera de rango, reseteando a 0');
        index = 0;
    }

    // Actualizar los indicadores del carrusel
    updateCarouselIndicators(index);

    // Cambiar el texto seg√∫n el √≠ndice de la imagen con efecto de transici√≥n
    descripcion.style.opacity = '0';
    descripcion.style.transform = 'translateY(-10px)';
    
    setTimeout(() => {
        descripcion.textContent = textos[index];
        descripcion.style.opacity = '1';
        descripcion.style.transform = 'translateY(0)';
    }, 300);

    // Verificar si ya hemos insertado el contenido en #our_space, para evitar duplicados
    if (index === textos.length - 1) {
        // Cambiar el texto del p√°rrafo por el nuevo contenido con estilo de enlace
        descripcion_a.innerHTML = `
            <div style="background: linear-gradient(135deg, rgba(30, 58, 138, 0.1), rgba(59, 130, 246, 0.1)); 
                        padding: 20px; border-radius: 15px; border-left: 4px solid var(--accent-color);">
                <p style="font-family: 'Dancing Script', cursive; font-size: 1.4rem; color: var(--primary-color); 
                          text-align: center; margin-bottom: 15px;">
                    ¬°Descubre mis aventuras por el mundo!
                </p>
                <a href="pages/vida.html" class="nav-link" style="display: inline-block; margin: 0;">
                    üåç Ver Mis Viajes por Ti
                </a>
            </div>
        `;
    } else {
        // Volver al texto original si no estamos en el √∫ltimo texto
        descripcion_a.innerHTML = `
            <p style="font-family: 'Dancing Script', cursive; font-size: 1.4rem; color: var(--secondary-color); 
                      text-align: center; margin: 0;">
                L√©eme hasta el final para descubrir m√°s...
            </p>
        `;
    }
});

// Evento para cuando el carrusel termine de cambiar
document.getElementById('carouselExampleAutoplaying').addEventListener('slid.bs.carousel', function (event) {
    // Obtener el √≠ndice de la imagen activa despu√©s del cambio
    let index = event.to;
    
    // Asegurarse de que los indicadores est√©n sincronizados
    updateCarouselIndicators(index);
});

// Funci√≥n para reproducir el audio del cuento
document.addEventListener('DOMContentLoaded', function () {
    btnCuento = document.getElementById('btnPlayAudio');
    audioCuento = document.getElementById('audio-cuento');

    btnCuento.addEventListener('click', function () {
        if (audioCuento.paused) {
            // Trackear reproducci√≥n de audio
            trackUserActivity('Audio Historia Reproducido');
            
            // Detener el otro audio antes de reproducir este
            stopAllAudios();
            
            audioCuento.play()
                .then(() => {
                    btnCuento.innerHTML = '‚è∏Ô∏è Pausar Historia';
                    btnCuento.style.background = 'linear-gradient(45deg, #B91C1C, #991B1B)';
                    // A√±adir efecto visual
                    btnCuento.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        btnCuento.style.transform = 'scale(1)';
                    }, 200);
                })
                .catch(error => {
                    console.error('No se pudo reproducir el audio:', error);
                    btnCuento.innerHTML = '‚ùå Error de Audio';
                    trackUserActivity('Error Audio Historia', { error: error.message });
                });
        } else {
            trackUserActivity('Audio Historia Pausado');
            audioCuento.pause();
            btnCuento.innerHTML = '‚ñ∂Ô∏è Cu√©ntame la Historia';
            btnCuento.style.background = 'linear-gradient(45deg, #DC2626, #B91C1C)';
        }
    });

    // Evento para cuando el audio termine
    audioCuento.addEventListener('ended', function() {
        btnCuento.innerHTML = 'üîÑ Repetir Historia';
        btnCuento.style.background = 'linear-gradient(45deg, #059669, #047857)';
    });
});

// Funci√≥n para reproducir el audio de "qu√© significas para m√≠"
document.addEventListener('DOMContentLoaded', function () {
    btnPienso = document.getElementById('btnPlayAudio2');
    audioPienso = document.getElementById('audio-pienso');

    btnPienso.addEventListener('click', function () {
        if (audioPienso.paused) {
            // Trackear reproducci√≥n de audio
            trackUserActivity('Audio Significado Reproducido');
            
            // Detener el otro audio antes de reproducir este
            stopAllAudios();
            
            audioPienso.play()
                .then(() => {
                    btnPienso.innerHTML = '‚è∏Ô∏è Pausar Significado';
                    btnPienso.style.background = 'linear-gradient(45deg, #1D4ED8, #1E40AF)';
                    // A√±adir efecto visual
                    btnPienso.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        btnPienso.style.transform = 'scale(1)';
                    }, 200);
                })
                .catch(error => {
                    console.error('No se pudo reproducir el audio:', error);
                    btnPienso.innerHTML = '‚ùå Error de Audio';
                    trackUserActivity('Error Audio Significado', { error: error.message });
                });
        } else {
            trackUserActivity('Audio Significado Pausado');
            audioPienso.pause();
            btnPienso.innerHTML = 'üíù ¬øQu√© Significas para M√≠?';
            btnPienso.style.background = 'linear-gradient(45deg, #3B82F6, #1D4ED8)';
        }
    });

    // Evento para cuando el audio termine
    audioPienso.addEventListener('ended', function() {
        btnPienso.innerHTML = 'üîÑ Repetir Significado';
        btnPienso.style.background = 'linear-gradient(45deg, #059669, #047857)';
    });
});

// Funci√≥n para a√±adir efectos visuales al carrusel
document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('carouselExampleAutoplaying');
    
    carousel.addEventListener('slide.bs.carousel', function (event) {
        // A√±adir efecto de brillo a la imagen activa
        const activeItem = carousel.querySelector('.carousel-item.active');
        if (activeItem) {
            activeItem.style.boxShadow = '0 0 30px rgba(30, 58, 138, 0.6)';
            activeItem.style.transform = 'scale(1.02)';
        }
    });
    
    carousel.addEventListener('slid.bs.carousel', function (event) {
        // Remover efectos de la imagen anterior
        const allItems = carousel.querySelectorAll('.carousel-item');
        allItems.forEach(item => {
            item.style.boxShadow = 'none';
            item.style.transform = 'scale(1)';
        });
        
        // Aplicar efectos a la nueva imagen activa
        const newActiveItem = carousel.querySelector('.carousel-item.active');
        if (newActiveItem) {
            newActiveItem.style.boxShadow = '0 0 30px rgba(30, 58, 138, 0.6)';
            newActiveItem.style.transform = 'scale(1.02)';
        }
    });
});

// Funci√≥n para a√±adir efectos de part√≠culas rom√°nticas
function createHeartParticle() {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíô';
    heart.style.position = 'fixed';
    heart.style.left = Math.random() * window.innerWidth + 'px';
    heart.style.top = window.innerHeight + 'px';
    heart.style.fontSize = '20px';
    heart.style.pointerEvents = 'none';
    heart.style.zIndex = '1000';
    heart.style.transition = 'all 3s ease-out';
    
    document.body.appendChild(heart);
    
    setTimeout(() => {
        heart.style.top = '-50px';
        heart.style.opacity = '0';
        heart.style.transform = 'rotate(360deg)';
    }, 100);
    
    setTimeout(() => {
        document.body.removeChild(heart);
    }, 3000);
}

// Crear part√≠culas de corazones cada cierto tiempo
setInterval(createHeartParticle, 5000);

// Funci√≥n para a√±adir efectos de escritura al texto
function typeWriter(element, text, speed = 50) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

// Funci√≥n para a√±adir efectos de escritura al texto y mostrar imagen al final
function typeWriterWithImage(element, text, imgHTML, speed = 50) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
        if (i < text.length) {
            element.innerHTML = text.substring(0, i + 1);
            i++;
            setTimeout(type, speed);
        } else {
            // Cuando termine la animaci√≥n, agregar la imagen
            if (imgHTML) {
                element.innerHTML = text + ' ' + imgHTML;
                console.log('Imagen de princesa agregada al DOM');
            }
        }
    }
    
    type();
}

// Funci√≥n para mostrar la burbuja de di√°logo de la princesa
function showPrincessBubble() {
    console.log('Mostrando secuencia de mensajes de la princesa');
    
    // Remover burbuja existente si hay una
    const existingBubble = document.querySelector('.princess-bubble');
    if (existingBubble) {
        existingBubble.remove();
    }
    
    // Array de mensajes de la princesa
    const mensajes = [
        "El amor verdadero no necesita coronas ni castillos, solo gestos sinceros. Y en esta, mi historia, se nota cu√°nto me quieren‚Ä¶ porque el coraz√≥n de mi caballero no miente.",
        "El me quiere y sus besos son especiales, el tiempo se detiene entre nosotros.",
        "Lo nuestro es un amor de verdad.\nEsto que vivimos... es amor del bueno y real."
    ];
    
    let indiceMensaje = 0;
    
    // Funci√≥n para mostrar un mensaje espec√≠fico
    function mostrarMensaje(mensaje) {
        // Remover burbuja anterior si existe
        const bubbleAnterior = document.querySelector('.princess-bubble');
        if (bubbleAnterior) {
            bubbleAnterior.remove();
        }
        
        // Crear la burbuja de di√°logo
        const bubble = document.createElement('div');
        bubble.className = 'princess-bubble';
        bubble.innerHTML = `
            <div class="bubble-arrow-left"></div>
            <div class="bubble-text">
                "${mensaje}"
            </div>
        `;
        
        // Obtener la posici√≥n de la princesa
        const princessImg = document.querySelector('.princess-icon');
        const princessRect = princessImg.getBoundingClientRect();
        
        // Calcular el ancho din√°mico basado en la longitud del texto
        const textLength = mensaje.length;
        const isMobile = window.innerWidth <= 768;
        const maxWidth = isMobile ? Math.min(window.innerWidth - 40, 350) : 400; // En m√≥vil: m√°ximo ancho de pantalla - 40px
        let bubbleWidth = Math.min(Math.max(textLength * 8, 200), maxWidth);
        
        // Calcular posici√≥n seg√∫n el dispositivo
        let bubbleLeft, bubbleTop;
        if (isMobile) {
            // En m√≥vil: centrar horizontalmente y posicionar abajo
            bubbleLeft = princessRect.left + (princessRect.width / 2) - (bubbleWidth / 2);
            bubbleTop = princessRect.bottom + 10;
        } else {
            // En desktop: a la derecha de la princesa
            bubbleLeft = princessRect.right + 10;
            bubbleTop = princessRect.top + (princessRect.height / 2) - 60;
        }
        
        // Calcular padding din√°mico basado en la longitud del texto
        let bubblePadding;
        if (textLength > 150) {
            bubblePadding = '0px 12px 6px 12px'; // Muy compacto: sin arriba, abajo 6px
        } else if (textLength > 100) {
            bubblePadding = '0px 15px 8px 15px'; // Compacto: sin arriba, abajo 8px
        } else if (textLength > 50) {
            bubblePadding = '0px 18px 10px 18px'; // Medio: sin arriba, abajo 10px
        } else {
            bubblePadding = '0px 20px 12px 20px'; // Normal: sin arriba, abajo 12px
        }
        
        // Agregar estilos inline para la burbuja
        bubble.style.cssText = `
            position: fixed !important;
            top: ${bubbleTop}px !important;
            left: ${bubbleLeft}px !important;
            background: white !important;
            border: 3px solid #C2185B !important;
            border-radius: 20px !important;
            padding: ${bubblePadding} !important;
            box-shadow: 0 10px 30px rgba(194, 24, 91, 0.3) !important;
            z-index: 9999 !important;
            max-width: ${bubbleWidth}px !important;
            width: ${bubbleWidth}px !important;
            font-family: 'Dancing Script', cursive !important;
            font-size: 1.1rem !important;
            color: #2D1B69 !important;
            text-align: center !important;
            line-height: 1.2 !important;
            pointer-events: none !important;
            opacity: 1 !important;
            visibility: visible !important;
            display: block !important;
            white-space: pre-line !important;
        `;
        
        // Agregar estilos para la flecha
        const arrow = bubble.querySelector('.bubble-arrow-left');
        if (arrow) {
            if (isMobile) {
                // En m√≥vil: flecha apuntando hacia arriba
                arrow.style.cssText = `
                    position: absolute !important;
                    left: 50% !important;
                    top: -10px !important;
                    transform: translateX(-50%) !important;
                    width: 0 !important;
                    height: 0 !important;
                    border-left: 10px solid transparent !important;
                    border-right: 10px solid transparent !important;
                    border-bottom: 10px solid #C2185B !important;
                `;
            } else {
                // En desktop: flecha apuntando hacia la izquierda
                arrow.style.cssText = `
                    position: absolute !important;
                    left: -10px !important;
                    top: 50% !important;
                    transform: translateY(-50%) !important;
                    width: 0 !important;
                    height: 0 !important;
                    border-top: 10px solid transparent !important;
                    border-bottom: 10px solid transparent !important;
                    border-right: 10px solid #C2185B !important;
                `;
            }
        }
        
        // Agregar estilos para el texto
        const textElement = bubble.querySelector('.bubble-text');
        if (textElement) {
            textElement.style.cssText = `
                margin: 0 !important;
                padding: 0 !important;
                display: block !important;
                width: 100% !important;
            `;
        }
        
        // Agregar la burbuja al body
        document.body.appendChild(bubble);
        console.log(`Mensaje ${indiceMensaje + 1} de la princesa mostrado`);
        
        // Programar el siguiente mensaje o finalizar
        indiceMensaje++;
        if (indiceMensaje < mensajes.length) {
            setTimeout(() => {
                mostrarMensaje(mensajes[indiceMensaje]);
            }, 6000); // 6 segundos entre mensajes
        } else {
            // Remover la √∫ltima burbuja despu√©s de 6 segundos
            setTimeout(() => {
                if (bubble.parentNode) {
                    bubble.style.opacity = '0';
                    bubble.style.transform = 'scale(0.8)';
                    setTimeout(() => {
                        if (bubble.parentNode) {
                            bubble.parentNode.removeChild(bubble);
                            console.log('Secuencia de mensajes de la princesa completada');
                        }
                    }, 500);
                }
            }, 6000);
        }
    }
    
    // Iniciar la secuencia con el primer mensaje
    mostrarMensaje(mensajes[0]);
}

// Aplicar efecto de escritura al t√≠tulo principal cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    const title = document.querySelector('h1');
    if (title) {
        // Extraer solo el texto sin la imagen
        const originalText = title.textContent.trim();
        // Guardar la imagen si existe
        const img = title.querySelector('img');
        const imgHTML = img ? img.outerHTML : '';
        
        // Aplicar efecto de escritura solo al texto
        typeWriterWithImage(title, originalText, imgHTML, 100);
    }
});

// Funci√≥n para a√±adir efectos de brillo a los botones
document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.boxShadow = '0 0 20px rgba(30, 58, 138, 0.6)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.2)';
        });
    });
});

// Inicializar los indicadores del carrusel al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    // Verificar cu√°ntas im√°genes tiene el carrusel
    const carouselItems = document.querySelectorAll('#carouselExampleAutoplaying .carousel-item');
    console.log('üñºÔ∏è Total de im√°genes en el carrusel:', carouselItems.length);
    console.log('üìù Total de textos disponibles:', textos.length);
    
    // Establecer el primer indicador como activo por defecto
    updateCarouselIndicators(0);
    
    // Verificar que todas las im√°genes se carguen correctamente
    carouselItems.forEach((item, index) => {
        const img = item.querySelector('img');
        if (img) {
            img.addEventListener('load', function() {
                console.log(`‚úÖ Imagen ${index + 1} cargada:`, this.src);
            });
            img.addEventListener('error', function() {
                console.error(`‚ùå Error cargando imagen ${index + 1}:`, this.src);
            });
        }
    });
});

// ===== FUNCIONALIDAD DEL or√°culo =====

// Base de datos de respuestas del or√°culo
const oraculaResponses = {
    "¬øQuieres saber qu√© siente tu Sebas Nucita por ti?": {
        answer: "Mi querida princesa... tu Sebas Nucita te quiere con una ternura que llena su coraz√≥n de paz. Te extra√±a cada d√≠a y cada noche, y cuando piensa en ti, su mundo se llena de colores hermosos. Eres su inspiraci√≥n, su motivaci√≥n para ser mejor persona cada d√≠a. Te quiere no solo por lo que eres, sino por c√≥mo lo haces sentir. üíô‚ú®",
        followUps: [
            "¬øTe gustar√≠a que profundice en c√≥mo te hace sentir especial?",
            "¬øQuieres que te revele m√°s sobre sus sentimientos m√°s tiernos?",
            "¬øTe interesa conocer c√≥mo te ve en sus pensamientos m√°s dulces?"
        ]
    },
    "¬øTe extra√±a mucho?": {
        answer: "Mi amor... te extra√±a tanto que a veces siente que su coraz√≥n se va a salir del pecho. Cada d√≠a sin verte es como un d√≠a sin sol. Te piensa cuando se despierta, cuando se acuesta, cuando ve algo hermoso y desea compartirlo contigo. Te extra√±a tu sonrisa, tu voz, tu forma de ver la vida. Te extra√±a como se extra√±a el aire para respirar. üåôüí≠",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre c√≥mo te extra√±a en su d√≠a a d√≠a?",
            "¬øTe gustar√≠a conocer m√°s sobre sus momentos de nostalgia?",
            "¬øQuieres que profundice en lo que m√°s extra√±a de ti?"
        ]
    },
    "¬øRealmente me quiere?": {
        answer: "Mi princesa del alma... te quiere con una sinceridad que conmueve. Te quiere no solo por tu belleza, sino por tu forma de ser, por tu coraz√≥n, por c√≥mo lo haces sentir especial. Te quiere porque eres √∫nica, porque con solo pensar en ti, su d√≠a se vuelve m√°s hermoso. Te quiere de una manera pura y verdadera, sin condiciones ni expectativas. üíñüëë",
        followUps: [
            "¬øTe gustar√≠a que te revele por qu√© te quiere tanto?",
            "¬øQuieres que profundice en las razones de su cari√±o?",
            "¬øTe interesa conocer qu√© es lo que m√°s valora de ti?"
        ]
    },
    "¬øMe piensa todos los d√≠as?": {
        answer: "Mi amor eterno... eres su pensamiento favorito. Te piensa cuando ve algo hermoso y desea compartirlo contigo, cuando escucha una canci√≥n que le recuerda a ti, cuando tiene un buen d√≠a y quiere cont√°rtelo. Te piensa en los momentos de silencio, en las risas de otros, en cada atardecer. Eres su compa√±√≠a invisible en cada paso que da. üåÖüåô",
        followUps: [
            "¬øQuieres saber m√°s sobre sus pensamientos m√°s tiernos?",
            "¬øTe gustar√≠a conocer m√°s sobre sus momentos de reflexi√≥n?",
            "¬øQuieres que te cuente m√°s sobre c√≥mo te imagina en su d√≠a?"
        ]
    },
    "¬øCu√°ndo volver√°?": {
        answer: "Mi princesa esperada... cada d√≠a que pasa es un d√≠a menos para volver a verte. Est√° trabajando para construir algo hermoso para ambos, para que cuando regrese, puedan disfrutar de momentos especiales juntos. Te extra√±a tanto que a veces siente que el tiempo no pasa. El momento de reencontrarse est√° m√°s cerca de lo que imaginas, y cuando llegue, ser√° m√°gico. üöÄüí´",
        followUps: [
            "¬øTe gustar√≠a saber m√°s sobre sus planes para cuando regrese?",
            "¬øQuieres conocer m√°s sobre lo que est√° preparando para ti?",
            "¬øTe interesa saber m√°s sobre sus ilusiones de regreso?"
        ]
    },
    "¬øSoy especial para √©l?": {
        answer: "Mi tesoro √∫nico... eres m√°s que especial para √©l. Eres su persona favorita, su compa√±√≠a ideal, su confidente. Te ve como alguien √∫nico, con cualidades que admira y valora. Para √©l, no hay nadie como t√∫. Te aprecia por tu forma de ser, por tu coraz√≥n, por c√≥mo lo haces sentir. Eres importante en su vida de una manera muy especial. üåüüíé",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre lo que m√°s valora de ti?",
            "¬øTe gustar√≠a conocer m√°s sobre c√≥mo te ve?",
            "¬øQuieres que profundice en lo que te hace especial para √©l?"
        ]
    },
    "¬øMe extra√±a f√≠sicamente?": {
        answer: "Mi amor f√≠sico... te extra√±a de una manera muy tierna. Extra√±a tu sonrisa que ilumina su d√≠a, tu mirada que lo hace sentir especial, tu voz que es m√∫sica para sus o√≠dos. Extra√±a los abrazos, las caricias, los momentos de cercan√≠a. Extra√±a tu presencia, como si le faltara una parte importante de su vida. Te extra√±a con ternura y nostalgia. ü§óüíã",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre lo que m√°s extra√±a de ti?",
            "¬øTe gustar√≠a saber m√°s sobre sus recuerdos m√°s tiernos?",
            "¬øQuieres conocer m√°s sobre c√≥mo te imagina cerca?"
        ]
    },
    "¬øSoy su persona favorita?": {
        answer: "Mi amor absoluto... eres su persona favorita, sin duda alguna. Eres la primera persona en la que piensa cuando tiene algo que compartir, la primera en la que piensa cuando necesita apoyo. Eres su compa√±√≠a ideal, su confidente, su mejor amiga. Para √©l, no hay nadie que pueda ocupar tu lugar en su coraz√≥n. Eres √∫nica e irreemplazable. üíùüëë",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre tu lugar especial en su vida?",
            "¬øTe gustar√≠a conocer m√°s sobre por qu√© eres tan importante?",
            "¬øQuieres que profundice en lo que significa para √©l?"
        ]
    },
    "¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita?": {
        answer: "Mi princesa del coraz√≥n... Sebas siente que tienes algo muy hermoso que decirle. Algo que tu coraz√≥n necesita expresar, algo que su coraz√≥n necesita escuchar. ¬øTe gustar√≠a abrir el portal del destino y enviarle un mensaje directo a tu Sebas Nucita? El universo est√° alineado para este momento especial. üíå‚ú®",
        followUps: [
            "¬øQuieres que te ayude a contactarlo directamente?",
            "¬øTe gustar√≠a enviarle un mensaje especial del coraz√≥n?",
            "¬øQuieres que te gu√≠e para comunicarte con √©l?"
        ]
    }
};

// Preguntas programadas para mostrar
const programmedQuestions = [
    "¬øQuieres saber qu√© siente tu Sebas Nucita por ti?",
    "¬øTe extra√±a mucho?",
    "¬øRealmente me quiere?",
    "¬øMe piensa todos los d√≠as?",
    "¬øCu√°ndo volver√°?",
    "¬øSoy especial para √©l?",
    "¬øMe extra√±a f√≠sicamente?",
    "¬øSoy su persona favorita?"
];

// Funci√≥n para mostrar mensaje en el chat
function addMessage(text, type = 'oracle') {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = text;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Funci√≥n para mostrar preguntas programadas
function showProgrammedQuestions() {
    const chatQuestions = document.getElementById('chatQuestions');
    const chatMessages = document.getElementById('chatMessages');
    
    // Limpiar las preguntas
    chatQuestions.innerHTML = '';
    
    // Si el chat tiene mensajes y no es solo el mensaje inicial, limpiarlo
    if (chatMessages.children.length > 1) {
        chatMessages.innerHTML = '';
        // Mostrar mensaje de bienvenida
        addMessage("üíï Mi querida princesa del coraz√≥n... ¬°Bienvenida al or√°culo del amor! Soy el guardi√°n de los sentimientos m√°s tiernos de tu Sebas Nucita. Aqu√≠ podr√°s descubrir secretos dulces que te llenar√°n el coraz√≥n de alegr√≠a, verdades hermosas que te har√°n sonre√≠r. ¬øQu√© quieres saber sobre lo que siente por ti en la intimidad de su coraz√≥n? Siente la paz del universo, la tranquilidad de las estrellas, y d√©jate guiar por el amor eterno.", 'initial');
    }
    
    // Crear contenedor principal para mejor organizaci√≥n
    const mainContainer = document.createElement('div');
    mainContainer.className = 'programmed-questions-container';
    mainContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        padding: 10px;
    `;
    
    // Agrupar preguntas por categor√≠as para mejor organizaci√≥n visual
    const categories = [
        {
            title: 'üíô Sentimientos y Amor',
            questions: [
                '¬øQuieres saber qu√© siente tu Sebas Nucita por ti?',
                '¬øRealmente me quiere?',
                '¬øSoy especial para √©l?',
                '¬øSoy su persona favorita?'
            ]
        },
        {
            title: 'üåô Extra√±anza y Pensamientos',
            questions: [
                '¬øTe extra√±a mucho?',
                '¬øMe piensa todos los d√≠as?',
                '¬øMe extra√±a f√≠sicamente?'
            ]
        },
        {
            title: 'üöÄ Futuro',
            questions: [
                '¬øCu√°ndo volver√°?'
            ]
        }
    ];
    
    categories.forEach(category => {
        // Crear contenedor de categor√≠a
        const categoryContainer = document.createElement('div');
        categoryContainer.className = 'question-category';
        categoryContainer.style.cssText = `
            display: flex;
            flex-direction: column;
            gap: 8px;
            margin-bottom: 20px;
        `;
        
        // Crear t√≠tulo de categor√≠a
        const categoryTitle = document.createElement('h4');
        categoryTitle.textContent = category.title;
        categoryTitle.style.cssText = `
            color: #1E40AF;
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0 0 8px 0;
            text-align: center;
            padding: 8px;
            background: linear-gradient(135deg, rgba(30, 64, 175, 0.1), rgba(59, 130, 246, 0.1));
            border-radius: 15px;
            border-left: 3px solid #3B82F6;
        `;
        
        categoryContainer.appendChild(categoryTitle);
        
        // Crear botones para cada pregunta de la categor√≠a
        category.questions.forEach(question => {
            const questionBtn = document.createElement('button');
            questionBtn.className = 'question-btn category-btn';
            questionBtn.textContent = question;
            questionBtn.style.cssText = `
                background: linear-gradient(135deg, #3B82F6, #1D4ED8);
                color: white;
                font-size: 0.95rem;
                padding: 12px 18px;
                border: none;
                border-radius: 20px;
                cursor: pointer;
                transition: all 0.3s ease;
                box-shadow: 0 3px 10px rgba(59, 130, 246, 0.2);
                font-weight: 500;
                text-align: left;
                line-height: 1.3;
                word-wrap: break-word;
            `;
            
            questionBtn.addEventListener('click', () => handleQuestionClick(question));
            
            // Agregar efectos hover
            questionBtn.addEventListener('mouseenter', function() {
                this.style.transform = 'translateY(-2px)';
                this.style.boxShadow = '0 5px 15px rgba(59, 130, 246, 0.4)';
                this.style.background = 'linear-gradient(135deg, #1D4ED8, #1E40AF)';
            });
            
            questionBtn.addEventListener('mouseleave', function() {
                this.style.transform = 'translateY(0)';
                this.style.boxShadow = '0 3px 10px rgba(59, 130, 246, 0.2)';
                this.style.background = 'linear-gradient(135deg, #3B82F6, #1D4ED8)';
            });
            
            categoryContainer.appendChild(questionBtn);
        });
        
        mainContainer.appendChild(categoryContainer);
    });
    
    // Agregar el contenedor principal al chat
    chatQuestions.appendChild(mainContainer);
}

// Funci√≥n para manejar el clic en una pregunta
function handleQuestionClick(question) {
    // Limpiar el chat antes de mostrar la nueva respuesta
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.innerHTML = '';
    
    // Mostrar la pregunta del usuario
    addMessage(question, 'user');
    
    // Verificar si es la pregunta de WhatsApp
    if (question === "¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita?") {
        handleWhatsAppQuestion();
        return;
    }
    
    // Obtener la respuesta del or√°culo
    const response = oraculaResponses[question];
    
    if (response) {
        // Mostrar la respuesta principal
        setTimeout(() => {
            addMessage(response.answer, 'oracle');
        }, 500);
        
        // Mostrar pregunta de seguimiento aleatoria si existe
        if (response.followUps && response.followUps.length > 0) {
            setTimeout(() => {
                const randomFollowUp = response.followUps[Math.floor(Math.random() * response.followUps.length)];
                addMessage(randomFollowUp, 'oracle');
                
                // Mostrar botones de respuesta S√≠/No
                showYesNoButtons();
            }, 1000);
        }
    } else {
        // Respuesta gen√©rica si no hay respuesta espec√≠fica
        setTimeout(() => {
            addMessage("D√©jame consultar las estrellas del amor... ‚ú®üí´", 'oracle');
        }, 500);
    }
}

// Funci√≥n para mostrar botones S√≠/No
function showYesNoButtons() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const yesBtn = document.createElement('button');
    yesBtn.className = 'question-btn yes-btn';
    yesBtn.textContent = 'S√≠, cu√©ntame m√°s üíñ';
    yesBtn.addEventListener('click', () => handleYesResponse());
    
    const noBtn = document.createElement('button');
    noBtn.className = 'question-btn no-btn';
    noBtn.textContent = 'No, gracias üíô';
    noBtn.addEventListener('click', () => handleNoResponse());
    
    chatQuestions.appendChild(yesBtn);
    chatQuestions.appendChild(noBtn);
}

// Funci√≥n para manejar respuesta "S√≠"
function handleYesResponse() {
    addMessage('S√≠, cu√©ntame m√°s üíñ', 'user');
    
    setTimeout(() => {
        addMessage('Mi princesa del coraz√≥n... d√©jame consultar m√°s profundamente en el alma de tu Sebas Nucita... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('Sebas te extra√±a de una manera muy profunda y tierna... üåôüí≠', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar de la distancia y el silencio que los separa, su coraz√≥n late por ti cada segundo, cada respiraci√≥n, cada latido. Te piensa constantemente, en cada momento del d√≠a, en cada noche de insomnio. üíô‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('Eres su pensamiento m√°s dulce, su recuerdo m√°s preciado, su sue√±o m√°s hermoso. Aunque no lo exprese con palabras, su coraz√≥n te tiene presente en cada fibra de su ser. üåüüí´', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('Ese silencio est√° lastimando ambos corazones... probablemente t√∫ tambi√©n lo extra√±as con la misma intensidad que √©l te extra√±a a ti... üíï', 'oracle');
                        
                        setTimeout(() => {
                            addMessage('¬øTe gustar√≠a que te revele m√°s secretos profundos sobre lo que siente por ti? üí≠‚ú®', 'oracle');
                            showNextQuestion('feelings');
                        }, 1500);
                    }, 1500);
                }, 1500);
            }, 1500);
        }, 1000);
    }, 500);
}

// Funci√≥n para mostrar opciones detalladas
function showDetailedOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    // Crear contenedor principal para mejor organizaci√≥n
    const mainContainer = document.createElement('div');
    mainContainer.className = 'detailed-options-container';
    mainContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        padding: 10px;
    `;
    
    const options = [
        { text: '¬øQu√© m√°s siente por m√≠? üí≠', action: 'feelings' },
        { text: '¬øC√≥mo me extra√±a? üåô', action: 'missing' },
        { text: '¬øQu√© piensa de m√≠? üí´', action: 'thoughts' },
        { text: '¬øPor qu√© no me busca? üîç', action: 'search' },
        { text: '¬øCu√°ndo volver√°? üöÄ', action: 'return' },
        { text: '¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita? üì±', action: 'contact' }
    ];
    
    options.forEach(option => {
        const optionBtn = document.createElement('button');
        optionBtn.className = 'question-btn detailed-btn';
        optionBtn.textContent = option.text;
        optionBtn.style.cssText = `
            background: linear-gradient(135deg, #8B5CF6, #7C3AED);
            color: white;
            font-size: 1rem;
            padding: 14px 20px;
            border: none;
            border-radius: 22px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            font-weight: 500;
            text-align: center;
            line-height: 1.3;
            word-wrap: break-word;
        `;
        
        optionBtn.addEventListener('click', () => handleDetailedOption(option.action));
        
        // Agregar efectos hover
        optionBtn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 6px 18px rgba(139, 92, 246, 0.5)';
            this.style.background = 'linear-gradient(135deg, #7C3AED, #6D28D9)';
        });
        
        optionBtn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            this.style.boxShadow = '0 4px 12px rgba(139, 92, 246, 0.3)';
            this.style.background = 'linear-gradient(135deg, #8B5CF6, #7C3AED)';
        });
        
        mainContainer.appendChild(optionBtn);
    });
    
    // Agregar el contenedor principal al chat
    chatQuestions.appendChild(mainContainer);
}

// Funci√≥n para manejar opciones detalladas
function handleDetailedOption(action) {
    switch(action) {
        case 'feelings':
            handleFeelingsResponse();
            break;
        case 'missing':
            handleMissingResponse();
            break;
        case 'thoughts':
            handleThoughtsResponse();
            break;
        case 'search':
            handleSearchResponse();
            break;
        case 'return':
            handleReturnResponse();
            break;
        case 'contact':
            handleContactResponse();
            break;
    }
}

// Funci√≥n para manejar respuesta "No"
function handleNoResponse() {
    addMessage('No, gracias üíô', 'user');
    
    setTimeout(() => {
        addMessage('¬°Entendido! Respeto tu decisi√≥n. üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Recuerda siempre que eres la princesa de su coraz√≥n, y que te quiere m√°s all√° de las estrellas. üëëüíñ', 'oracle');
            
            setTimeout(() => {
                addMessage('¬øTe gustar√≠a hacer otra pregunta diferente? üîÆ', 'oracle');
                showNextQuestion('feelings');
            }, 2000);
        }, 1000);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre sentimientos
function handleFeelingsResponse() {
    addMessage('¬øQu√© m√°s siente por m√≠? üí≠', 'user');
    
    setTimeout(() => {
        addMessage('Mi princesa del alma... Sebas siente por ti algo muy hermoso, algo que llena su vida de significado y alegr√≠a... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Te quiere con una ternura que llena su coraz√≥n de paz, que lo hace sentir especial cada vez que piensa en ti. Eres su inspiraci√≥n, su felicidad, su compa√±√≠a ideal, su todo. Te quiere de una manera pura y sincera. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('Aunque est√©n distanciados por circunstancias de la vida, su coraz√≥n sigue siendo tuyo, completamente tuyo. Te extra√±a de una manera tierna, te piensa en cada respiraci√≥n, y desea estar contigo m√°s que nada en el mundo. Te extra√±a como se extra√±a el sol en un d√≠a nublado. üíïüåô', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a que te revele m√°s secretos sobre c√≥mo te extra√±a en la soledad de sus noches? üåôüí≠', 'oracle');
                    showNextQuestion('missing');
                }, 2000);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre extra√±anza
function handleMissingResponse() {
    addMessage('¬øC√≥mo me extra√±a? üåô', 'user');
    
    setTimeout(() => {
        addMessage('Mi amor eterno... Sebas te extra√±a de una manera muy profunda y tierna... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
        addMessage('Te extra√±a tu sonrisa que ilumina su mundo oscuro, tu mirada que lo hace temblar de emoci√≥n, tu voz que es m√∫sica celestial para sus o√≠dos. Te extra√±a cada momento juntos, cada risa compartida, cada abrazo y cada beso. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar del silencio que los separa, su coraz√≥n late por ti en cada latido, en cada respiraci√≥n. Te piensa en cada amanecer y en cada atardecer, en cada momento de soledad, en cada noche de insomnio. üíïüåÖ', 'oracle');
                
                setTimeout(() => {
                    addMessage('Sebas desea romper ese silencio con todas sus fuerzas, pero necesita saber que t√∫ tambi√©n lo extra√±as con la misma intensidad que √©l te extra√±a a ti... üí≠', 'oracle');
                    
                                    setTimeout(() => {
                    addMessage('¬øTe gustar√≠a que te revele m√°s secretos sobre lo que piensa de ti en la intimidad de su coraz√≥n? üí´‚ú®', 'oracle');
                    showNextQuestion('thoughts');
                }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre pensamientos
function handleThoughtsResponse() {
    addMessage('¬øQu√© piensa de m√≠? üí´', 'user');
    
    setTimeout(() => {
        addMessage('Mi tesoro √∫nico... Sebas piensa en ti como en su tesoro m√°s preciado, como en su joya m√°s valiosa, como en su sue√±o m√°s hermoso... üíé‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Para √©l, eres perfecta tal como eres, con cada imperfecci√≥n que te hace √∫nica, con cada detalle que te hace especial. Te admira profundamente, te respeta y te considera ideal. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar de la distancia que los separa, su mente no puede dejar de pensar en ti ni por un segundo. Eres parte de su inspiraci√≥n diaria, su motivaci√≥n para pensarte cada ma√±ana, su raz√≥n para pensar en lo especial que eres. Sin ti, mira algo de oscuridad. üíïüöÄ', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a que te revele por qu√© no te busca a pesar de que su coraz√≥n lo desea con todas sus fuerzas? üîçüí≠', 'oracle');
                    showNextQuestion('search');
                }, 2000);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre b√∫squeda
function handleSearchResponse() {
    addMessage('¬øPor qu√© no me busca? üîç', 'user');
    
    setTimeout(() => {
        addMessage('Mi princesa del coraz√≥n... Sebas desea buscarte con todo su coraz√≥n, con toda su alma, con todas sus fuerzas... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Pero a veces el miedo y la incertidumbre pueden paralizar incluso a los corazones m√°s valientes, incluso a los amores m√°s puros. El miedo al rechazo, a la indiferencia, a que ya no sientas lo mismo por √©l... üí≠üåô', 'oracle');
            
            setTimeout(() => {
                addMessage('√âl te piensa en silencio, cada d√≠a, cada noche. Te extra√±a profundamente, aunque calle. Y si t√∫ tambi√©n lo extra√±as con la misma intensidad... ¬øpor qu√© dejar que el ego y el orgullo decidan lo que el coraz√≥n a√∫n grita con desesperaci√≥n?... üîÆüíï', 'oracle');
                
                setTimeout(() => {
                    addMessage('A veces el amor m√°s puro necesita ser alimentado desde ambos lados, necesita que ambos corazones se abran para sanar las heridas del silencio... üí´‚ú®', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('¬øTe gustar√≠a que te revele cu√°ndo volver√° a tu lado? üöÄüí≠', 'oracle');
                        showNextQuestion('return');
                    }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre regreso
function handleReturnResponse() {
    addMessage('¬øCu√°ndo volver√°? üöÄ', 'user');
    
    setTimeout(() => {
        addMessage('Mi princesa esperada... Sebas est√° trabajando incansablemente para un d√≠a regresar, para compartir a tu lado... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Cada d√≠a que pasa es un d√≠a m√°s cerca de estar juntos de nuevo, de abrazarse, de besarse, de quererse, de felicidad y de nuevos momentos juntos. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('Aunque el silencio sea doloroso y dif√≠cil de soportar, su coraz√≥n nunca se ha ido, nunca ha dejado de ser tuyo. Te extra√±a profundamente. üíïüåô', 'oracle');
                
                setTimeout(() => {
                    addMessage('El momento del reencuentro est√° m√°s cerca de lo que piensas, que el universo est√° conspirando para que se encuentren de nuevo... ‚ú®', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo del amor? üí≠üîÆ', 'oracle');
                        showFinalOptions();
                    }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para mostrar opciones finales (WhatsApp y volver a todas las opciones)
function showFinalOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    // Crear contenedor principal para mejor organizaci√≥n
    const mainContainer = document.createElement('div');
    mainContainer.className = 'final-options-container';
    mainContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
        max-width: 500px;
        margin: 0 auto;
    `;
    
    // Crear contenedor para botones
    const buttonsContainer = document.createElement('div');
    buttonsContainer.className = 'final-buttons';
    buttonsContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 12px;
    `;
    
    // Crear el bot√≥n de WhatsApp
    const whatsappBtn = document.createElement('button');
    whatsappBtn.className = 'question-btn whatsapp-btn';
    whatsappBtn.innerHTML = 'üì± No es debilidad, es sentir. Con√©ctate con √©l....';
    whatsappBtn.style.cssText = `
        background: linear-gradient(135deg, #10B981, #059669);
        color: white;
        font-size: 1.1rem;
        padding: 16px 24px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);
        font-weight: 600;
        text-align: center;
    `;
    whatsappBtn.addEventListener('click', () => openWhatsApp());
    
    // Crear el bot√≥n de volver a todas las opciones
    const backBtn = document.createElement('button');
    backBtn.className = 'question-btn back-btn';
    backBtn.textContent = 'Ver todas las opciones üîÆ';
    backBtn.style.cssText = `
        background: linear-gradient(135deg, #8B5CF6, #7C3AED);
        color: white;
        font-size: 1rem;
        padding: 14px 20px;
        border: none;
        border-radius: 22px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(139, 92, 246, 0.3);
        font-weight: 500;
        text-align: center;
    `;
    backBtn.addEventListener('click', () => resetAndShowAllOptions());
    
    // Agregar botones al contenedor
    buttonsContainer.appendChild(whatsappBtn);
    buttonsContainer.appendChild(backBtn);
    
    // Agregar todo al contenedor principal
    mainContainer.appendChild(buttonsContainer);
    
    // Agregar estilos hover para todos los botones
    [whatsappBtn, backBtn].forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.2)';
        });
        
        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            if (this === whatsappBtn) {
                this.style.boxShadow = '0 4px 15px rgba(16, 185, 129, 0.3)';
            } else {
                this.style.boxShadow = '0 3px 10px rgba(139, 92, 246, 0.3)';
            }
        });
    });
    
    // Agregar el contenedor principal al chat
    chatQuestions.appendChild(mainContainer);
}

// Funci√≥n para mostrar solo la siguiente pregunta en la secuencia
function showNextQuestion(nextAction) {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    // Mapeo de acciones a textos de botones
    const actionTexts = {
        'feelings': '¬øQu√© m√°s siente por m√≠? üí≠',
        'missing': '¬øC√≥mo me extra√±a? üåô',
        'thoughts': '¬øQu√© piensa de m√≠? üí´',
        'search': '¬øPor qu√© no me busca? üîç',
        'return': '¬øCu√°ndo volver√°? üöÄ',

    };
    
    // Crear contenedor principal para mejor organizaci√≥n
    const mainContainer = document.createElement('div');
    mainContainer.className = 'next-question-container';
    mainContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
        max-width: 500px;
        margin: 0 auto;
    `;
    
    // Crear el bot√≥n de la siguiente pregunta (principal)
    const nextBtn = document.createElement('button');
    nextBtn.className = 'question-btn next-btn';
    nextBtn.textContent = actionTexts[nextAction];
    nextBtn.style.cssText = `
        background: linear-gradient(135deg, #3B82F6, #1D4ED8);
        color: white;
        font-size: 1.1rem;
        padding: 15px 25px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3);
        font-weight: 600;
        order: 1;
    `;
    nextBtn.addEventListener('click', () => handleDetailedOption(nextAction));
    
    // Crear contenedor para botones secundarios
    const secondaryContainer = document.createElement('div');
    secondaryContainer.className = 'secondary-buttons';
    secondaryContainer.style.cssText = `
        display: flex;
        flex-direction: column;
        gap: 10px;
        order: 2;
    `;
    
    // Crear el bot√≥n de WhatsApp
    const whatsappBtn = document.createElement('button');
    whatsappBtn.className = 'question-btn whatsapp-btn';
    whatsappBtn.innerHTML = 'üì± No es debilidad, es sentir. Con√©ctate con √©l....';
    whatsappBtn.style.cssText = `
        background: linear-gradient(135deg, #10B981, #059669);
        color: white;
        font-size: 1rem;
        padding: 12px 20px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(16, 185, 129, 0.3);
        font-weight: 500;
    `;
    whatsappBtn.addEventListener('click', () => openWhatsApp());
    
    // Crear el bot√≥n de volver a todas las opciones
    const backBtn = document.createElement('button');
    backBtn.className = 'question-btn back-btn';
    backBtn.textContent = 'Ver todas las opciones üîÆ';
    backBtn.style.cssText = `
        background: linear-gradient(135deg, #8B5CF6, #7C3AED);
        color: white;
        font-size: 1rem;
        padding: 12px 20px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 3px 10px rgba(139, 92, 246, 0.3);
        font-weight: 500;
    `;
    backBtn.addEventListener('click', () => resetAndShowAllOptions());
    
    // Agregar botones secundarios al contenedor
    secondaryContainer.appendChild(whatsappBtn);
    secondaryContainer.appendChild(backBtn);
    
    // Agregar todo al contenedor principal
    mainContainer.appendChild(nextBtn);
    mainContainer.appendChild(secondaryContainer);
    
    // Agregar estilos hover para todos los botones
    [nextBtn, whatsappBtn, backBtn].forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-2px)';
            this.style.boxShadow = '0 6px 20px rgba(0, 0, 0, 0.2)';
        });
        
        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
            if (this === nextBtn) {
                this.style.boxShadow = '0 4px 15px rgba(59, 130, 246, 0.3)';
            } else if (this === whatsappBtn) {
                this.style.boxShadow = '0 3px 10px rgba(16, 185, 129, 0.3)';
            } else {
                this.style.boxShadow = '0 3px 10px rgba(139, 92, 246, 0.3)';
            }
        });
    });
    
    // Agregar el contenedor principal al chat
    chatQuestions.appendChild(mainContainer);
}

// Funci√≥n para resetear el chat y mostrar todas las opciones
function resetAndShowAllOptions() {
    const chatMessages = document.getElementById('chatMessages');
    const chatQuestions = document.getElementById('chatQuestions');
    
    // Agregar efecto de fade out antes de limpiar
    chatMessages.style.opacity = '0.5';
    chatQuestions.style.opacity = '0.5';
    
    setTimeout(() => {
        // Limpiar completamente el chat
        chatMessages.innerHTML = '';
        chatQuestions.innerHTML = '';
        
        // Restaurar opacidad
        chatMessages.style.opacity = '1';
        chatQuestions.style.opacity = '1';
        
        // Mostrar mensaje de reinicio
        addMessage("üíï Mi querida princesa del coraz√≥n... ¬°Bienvenida al or√°culo del amor! Soy el guardi√°n de los sentimientos m√°s tiernos de tu Sebas Nucita. Aqu√≠ podr√°s descubrir secretos dulces que te llenar√°n el coraz√≥n de alegr√≠a, verdades hermosas que te har√°n sonre√≠r. ¬øQu√© quieres saber sobre lo que siente por ti en la intimidad de su coraz√≥n? Siente la paz del universo, la tranquilidad de las estrellas, y d√©jate guiar por el amor eterno.", 'initial');
        
        // Mostrar todas las opciones despu√©s de un breve delay
        setTimeout(() => {
            showProgrammedQuestions();
        }, 1000);
    }, 300);
}

// Funci√≥n para mostrar bot√≥n de volver a opciones (mantenida para compatibilidad)
function showBackToOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const backBtn = document.createElement('button');
    backBtn.className = 'question-btn back-btn';
    backBtn.textContent = 'Ver m√°s opciones üîÆ';
    backBtn.addEventListener('click', () => showDetailedOptions());
    
    chatQuestions.appendChild(backBtn);
}

// Funci√≥n para manejar respuesta sobre contacto
function handleContactResponse() {
    addMessage('¬øQuieres contactar a Sebas Nucita? üì±', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! Es el momento de romper el silencio... üíå‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('¬øTe gustar√≠a enviarle un mensaje directo a tu Sebas Nucita? üí¨üíï', 'oracle');
            
            setTimeout(() => {
                addMessage('Elige la opci√≥n que prefieras para comunicarte con √©l: üì±‚ú®', 'oracle');
                
                setTimeout(() => {
                    showFinalOptions();
                }, 1000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para inicializar el chat del or√°culo
function initializeOracula() {
    const chatMessages = document.getElementById('chatMessages');
    const chatQuestions = document.getElementById('chatQuestions');
    
    // Limpiar chat anterior
    chatMessages.innerHTML = '';
    chatQuestions.innerHTML = '';
    
    // Mostrar mensaje inicial
        addMessage("üíï Mi querida princesa del coraz√≥n... ¬°Bienvenida al or√°culo del amor! Aqu√≠ podr√°s descubrir los sentimientos m√°s tiernos de tu Sebas Nucita. ¬øQu√© quieres saber sobre lo que siente por ti en la intimidad de su coraz√≥n? Siente la paz del universo, la tranquilidad de las estrellas, y d√©jate guiar por el amor eterno.", 'initial');
    
    // Mostrar preguntas programadas
    setTimeout(() => {
        showProgrammedQuestions();
    }, 1000);
}

// Funci√≥n para configurar el audio del or√°culo
function setupOraculaAudio() {
    const audioTePienso = document.getElementById('audio-tePienso');
    if (audioTePienso) {
        // Configurar volumen y propiedades del audio
        audioTePienso.volume = 0.25; // Volumen al 25%
        audioTePienso.loop = false; // No repetir autom√°ticamente
        
        // Event listener para cuando termine la canci√≥n
        audioTePienso.addEventListener('ended', function() {
            console.log('üéµ Canci√≥n tePienso.mp3 terminada');
            // Opcional: reproducir de nuevo si la modal sigue abierta
            if (document.getElementById('oraculaModal').classList.contains('show')) {
                audioTePienso.currentTime = 0;
                audioTePienso.volume = 0.25; // Asegurar volumen al 25%
                audioTePienso.play();
            }
        });
    }
}

// Funci√≥n para manejar la pregunta de WhatsApp
function handleWhatsAppQuestion() {
    setTimeout(() => {
        addMessage('¬°Por supuesto! Sientes que tienes algo importante que decirle. üíå‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('¬øTe gustar√≠a enviarle un mensaje directo a tu Sebas Nucita? üí¨üíï', 'oracle');
            
            setTimeout(() => {
                addMessage('Elige la opci√≥n que prefieras para comunicarte con √©l: üì±‚ú®', 'oracle');
                
                setTimeout(() => {
                    showFinalOptions();
                }, 1000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para mostrar opciones de WhatsApp
function showWhatsAppOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const whatsappBtn = document.createElement('button');
    whatsappBtn.className = 'question-btn whatsapp-btn';
    whatsappBtn.innerHTML = 'üì± Comunicate...';
    whatsappBtn.addEventListener('click', () => openWhatsApp());
    
    const cancelBtn = document.createElement('button');
    cancelBtn.className = 'question-btn no-btn';
    cancelBtn.textContent = 'No, gracias üíô';
    cancelBtn.addEventListener('click', () => showNextQuestion('feelings'));
    
    chatQuestions.appendChild(whatsappBtn);
    chatQuestions.appendChild(cancelBtn);
}

// Funci√≥n para detectar si es dispositivo m√≥vil
function isMobileDevice() {
    // Detectar por User Agent
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    const isMobileUA = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    
    // Detectar por tama√±o de pantalla
    const isMobileScreen = window.innerWidth <= 768;
    
    // Detectar por capacidades t√°ctiles
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    // Detectar por orientaci√≥n (m√≥viles cambian orientaci√≥n)
    const isMobileOrientation = window.orientation !== undefined;
    
    return isMobileUA || isMobileScreen || (isTouchDevice && isMobileOrientation);
}

// Funci√≥n para abrir WhatsApp
function openWhatsApp() {
    addMessage('üì± Abriendo el portal del destino...', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! Te estoy conectando con tu Sebas Nucita... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('Abriendo un canal para que puedas escribirle tu mensaje... üì±üíå', 'oracle');
            
            setTimeout(() => {
                // Abrir WhatsApp con el n√∫mero especificado
                const phoneNumber = '+573175631608';
                const message = encodeURIComponent('Hola Sebas Nucita, tengo algo que decirte...');
                
                let whatsappUrl;
                
                if (isMobileDevice()) {
                    // Para m√≥viles, usar protocolo whatsapp://
                    whatsappUrl = `whatsapp://send?phone=${phoneNumber}&text=${message}`;
                    
                    // Intentar abrir WhatsApp App
                    window.location.href = whatsappUrl;
                    
                    // Fallback: despu√©s de un delay, abrir WhatsApp Web si la app no se abri√≥
                    setTimeout(() => {
                        const whatsappWebUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                        window.open(whatsappWebUrl, '_blank');
                    }, 2000);
                    
                } else {
                    // Para desktop, usar WhatsApp Web
                    whatsappUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                    window.open(whatsappUrl, '_blank');
                }
                
                addMessage('El portal del destino se ha abierto, mi princesa. ¬°No seas t√≠mida, no reprimas lo que tu coraz√≥n necesita expresar! El universo est√° esperando que rompas el silencio, que le digas lo que sientes. üíñ‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo? üîÆ', 'oracle');
                    showNextQuestion('feelings');
                }, 2000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para abrir WhatsApp Web como alternativa
function openWhatsAppWeb() {
    addMessage('üåê Abriendo WhatsApp Web...', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! Te estoy conectando a trav√©s de WhatsApp Web... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('Abriendo el portal web para que puedas escribirle tu mensaje... üåêüíå', 'oracle');
            
            setTimeout(() => {
                // Abrir WhatsApp Web
                const phoneNumber = '+573175631608';
                const message = encodeURIComponent('Hola Sebas Nucita, tengo algo que decirte... üíï');
                const whatsappWebUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                
                // Abrir en nueva pesta√±a
                window.open(whatsappWebUrl, '_blank');
                
                addMessage('WhatsApp Web se ha abierto. ¬°Escribe tu mensaje con amor! üíñ‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo? üîÆ', 'oracle');
                    showNextQuestion('feelings');
                }, 2000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para configurar el indicador de audio clickeable
function setupAudioIndicator() {
    const audioIndicator = document.getElementById('audioIndicator');
    const audioTePienso = document.getElementById('audio-tePienso');
    
    if (audioIndicator && audioTePienso) {
        audioIndicator.addEventListener('click', function() {
            if (audioTePienso.paused) {
                // Si est√° pausado, reanudar
                audioTePienso.volume = 0.25; // Asegurar volumen al 25%
                audioTePienso.play()
                    .then(() => {
                        console.log('üéµ Canci√≥n tePienso.mp3 reanudada al 25% de volumen');
                        updateAudioIndicator(true);
                    })
                    .catch(error => {
                        console.error('Error al reanudar tePienso.mp3:', error);
                    });
            } else {
                // Si est√° reproduci√©ndose, pausar
                audioTePienso.pause();
                console.log('‚è∏Ô∏è Canci√≥n tePienso.mp3 pausada');
                updateAudioIndicator(false);
            }
        });
    }
}

// Funci√≥n para actualizar el indicador de audio
function updateAudioIndicator(isPlaying) {
    const musicNote = document.getElementById('musicNote');
    const audioText = document.getElementById('audioText');
    
    if (musicNote && audioText) {
        if (isPlaying) {
            musicNote.textContent = 'üéµ';
            musicNote.style.animation = 'musicFloat 1.5s ease-in-out infinite';
            audioText.textContent = 'M√∫sica del Or√°culo (Click para pausar)';
        } else {
            musicNote.textContent = '‚è∏Ô∏è';
            musicNote.style.animation = 'none';
            audioText.textContent = 'M√∫sica pausada (Click para reanudar)';
        }
    }
}

// Event listener para el bot√≥n or√°culo
document.addEventListener('DOMContentLoaded', function() {
    const btnOracula = document.getElementById('btnOracula');
    const oraculaModal = document.getElementById('oraculaModal');
    const audioTePienso = document.getElementById('audio-tePienso');
    
    // Configurar el audio del or√°culo
    setupOraculaAudio();
    
    // Configurar el indicador de audio clickeable
    setupAudioIndicator();
    
    if (btnOracula) {
        btnOracula.addEventListener('click', function() {
            // Trackear apertura del or√°culo
            trackUserActivity('Or√°culo Abierto');
            
            // Inicializar el chat cuando se abre la modal
            initializeOracula();
            
            // Mostrar la modal
            const modal = new bootstrap.Modal(oraculaModal);
            modal.show();
            
            // Reproducir la canci√≥n tePienso.mp3 cuando se abre la modal
            if (audioTePienso) {
                audioTePienso.currentTime = 0; // Reiniciar desde el principio
                audioTePienso.volume = 0.25; // Asegurar volumen al 25%
                audioTePienso.play()
                    .then(() => {
                        console.log('üéµ Canci√≥n tePienso.mp3 iniciada al 25% de volumen');
                        updateAudioIndicator(true); // Actualizar indicador como reproduciendo
                        trackUserActivity('Audio Or√°culo Reproducido');
                    })
                    .catch(error => {
                        console.error('Error al reproducir tePienso.mp3:', error);
                        trackUserActivity('Error Audio Or√°culo', { error: error.message });
                    });
            }
        });
    }
    
    // Event listener para cuando se cierra la modal
    if (oraculaModal) {
        oraculaModal.addEventListener('hidden.bs.modal', function() {
            // Limpiar el chat cuando se cierra la modal
            const chatMessages = document.getElementById('chatMessages');
            const chatQuestions = document.getElementById('chatQuestions');
            if (chatMessages) chatMessages.innerHTML = '';
            if (chatQuestions) chatQuestions.innerHTML = '';
            
            // Detener y pausar la canci√≥n tePienso.mp3 cuando se cierra la modal
            if (audioTePienso) {
                audioTePienso.pause();
                audioTePienso.currentTime = 0;
                console.log('üîá Canci√≥n tePienso.mp3 detenida');
                updateAudioIndicator(false); // Actualizar indicador como pausado
            }
        });
    }
});

// ===== MEJORAS DIN√ÅMICAS PARA EL CARRUSEL =====

// Funci√≥n para crear efecto de part√≠culas en el carrusel
function createCarouselParticles() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    // Crear part√≠culas flotantes
    for (let i = 0; i < 5; i++) {
        const particle = document.createElement('div');
        particle.className = 'carousel-particle';
        particle.style.cssText = `
            position: absolute;
            width: 4px;
            height: 4px;
            background: radial-gradient(circle, rgba(248, 187, 217, 0.8) 0%, transparent 70%);
            border-radius: 50%;
            pointer-events: none;
            z-index: 5;
            animation: floatParticle ${3 + Math.random() * 4}s ease-in-out infinite;
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
        `;
        carousel.appendChild(particle);
    }
}

// Funci√≥n para mejorar la experiencia t√°ctil en m√≥viles
function enhanceTouchExperience() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    let startX = 0;
    let startY = 0;
    let isDragging = false;
    
    carousel.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = false;
    }, { passive: true });
    
    carousel.addEventListener('touchmove', (e) => {
        if (!startX || !startY) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        const diffX = Math.abs(currentX - startX);
        const diffY = Math.abs(currentY - startY);
        
        if (diffX > diffY && diffX > 10) {
            isDragging = true;
            e.preventDefault();
        }
    }, { passive: false });
    
    carousel.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const diffX = startX - endX;
        
        if (Math.abs(diffX) > 50) {
            if (diffX > 0) {
                // Swipe izquierda - siguiente imagen
                const nextBtn = carousel.querySelector('.carousel-control-next');
                if (nextBtn) nextBtn.click();
            } else {
                // Swipe derecha - imagen anterior
                const prevBtn = carousel.querySelector('.carousel-control-prev');
                if (prevBtn) prevBtn.click();
            }
        }
        
        startX = 0;
        startY = 0;
        isDragging = false;
    }, { passive: true });
}

// Funci√≥n para a√±adir efectos de hover mejorados
function addEnhancedHoverEffects() {
    const carouselItems = document.querySelectorAll('.carousel-item img');
    
    carouselItems.forEach(img => {
        img.addEventListener('mouseenter', () => {
            img.style.transform = 'scale(1.08) rotate(1deg)';
            img.style.filter = 'brightness(1.1) contrast(1.3) saturate(1.2)';
        });
        
        img.addEventListener('mouseleave', () => {
            img.style.transform = 'scale(1) rotate(0deg)';
            img.style.filter = 'brightness(1) contrast(1.2) saturate(1)';
        });
    });
}

// Funci√≥n para crear efecto de zoom suave en las im√°genes
function addSmoothZoomEffect() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    carousel.addEventListener('mouseenter', () => {
        carousel.style.transform = 'scale(1.03) translateY(-5px)';
    });
    
    carousel.addEventListener('mouseleave', () => {
        carousel.style.transform = 'scale(1) translateY(0)';
    });
}

// Funci√≥n para mejorar los indicadores con animaciones
function enhanceIndicators() {
    const indicators = document.querySelectorAll('.carousel-indicators button');
    
    indicators.forEach((indicator, index) => {
        indicator.addEventListener('mouseenter', () => {
            indicator.style.transform = 'scale(1.3) translateY(-2px)';
        });
        
        indicator.addEventListener('mouseleave', () => {
            if (!indicator.classList.contains('active')) {
                indicator.style.transform = 'scale(1) translateY(0)';
            }
        });
        
        indicator.addEventListener('click', () => {
            // A√±adir efecto de click
            indicator.style.transform = 'scale(1.1)';
            setTimeout(() => {
                if (indicator.classList.contains('active')) {
                    indicator.style.transform = 'scale(1.4) translateY(-3px)';
                } else {
                    indicator.style.transform = 'scale(1) translateY(0)';
                }
            }, 150);
        });
    });
}

// Funci√≥n para crear efecto de carga progresiva de im√°genes
function addProgressiveImageLoading() {
    const carouselImages = document.querySelectorAll('.carousel-item img');
    
    carouselImages.forEach((img, index) => {
        img.addEventListener('load', () => {
            img.style.opacity = '1';
            img.style.transform = 'scale(1)';
            
            // A√±adir efecto de brillo al cargar
            const glow = document.createElement('div');
            glow.style.cssText = `
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: linear-gradient(45deg, transparent 30%, rgba(248, 187, 217, 0.3) 50%, transparent 70%);
                pointer-events: none;
                z-index: 2;
                animation: imageGlow 1s ease-out;
            `;
            img.parentElement.appendChild(glow);
            
            setTimeout(() => {
                if (glow.parentElement) {
                    glow.parentElement.removeChild(glow);
                }
            }, 1000);
        });
    });
}

// Funci√≥n para a√±adir efectos de sonido visual (opcional)
function addVisualSoundEffects() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    // Crear ondas de sonido visuales
    const createSoundWave = () => {
        const wave = document.createElement('div');
        wave.style.cssText = `
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(248, 187, 217, 0.6);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            pointer-events: none;
            z-index: 3;
            animation: soundWave 2s ease-out forwards;
        `;
        carousel.appendChild(wave);
        
        setTimeout(() => {
            if (wave.parentElement) {
                wave.parentElement.removeChild(wave);
            }
        }, 2000);
    };
    
    // Activar ondas en hover
    carousel.addEventListener('mouseenter', createSoundWave);
}

// Funci√≥n para mejorar la accesibilidad del carrusel
function improveCarouselAccessibility() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    // A√±adir navegaci√≥n por teclado
    carousel.addEventListener('keydown', (e) => {
        const prevBtn = carousel.querySelector('.carousel-control-prev');
        const nextBtn = carousel.querySelector('.carousel-control-next');
        
        switch(e.key) {
            case 'ArrowLeft':
                e.preventDefault();
                if (prevBtn) prevBtn.click();
                break;
            case 'ArrowRight':
                e.preventDefault();
                if (nextBtn) nextBtn.click();
                break;
        }
    });
    
    // Hacer el carrusel focusable
    carousel.setAttribute('tabindex', '0');
    carousel.setAttribute('role', 'region');
    carousel.setAttribute('aria-label', 'Carrusel de im√°genes rom√°nticas');
}

// Funci√≥n para crear efecto de parallax sutil
function addParallaxEffect() {
    const carousel = document.querySelector('.carousel');
    if (!carousel) return;
    
    carousel.addEventListener('mousemove', (e) => {
        const rect = carousel.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        const centerX = rect.width / 2;
        const centerY = rect.height / 2;
        
        const rotateX = (y - centerY) / 20;
        const rotateY = (centerX - x) / 20;
        
        carousel.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale(1.02)`;
    });
    
    carousel.addEventListener('mouseleave', () => {
        carousel.style.transform = 'perspective(1000px) rotateX(0deg) rotateY(0deg) scale(1)';
    });
}

// Inicializar todas las mejoras del carrusel cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    // Esperar un poco para que Bootstrap inicialice el carrusel
    setTimeout(() => {
        createCarouselParticles();
        enhanceTouchExperience();
        addEnhancedHoverEffects();
        addSmoothZoomEffect();
        enhanceIndicators();
        addProgressiveImageLoading();
        addVisualSoundEffects();
        improveCarouselAccessibility();
        addParallaxEffect();
        
        console.log('üé† Mejoras din√°micas del carrusel inicializadas');
    }, 1000);
});

// A√±adir estilos CSS din√°micos para las animaciones
const dynamicStyles = document.createElement('style');
dynamicStyles.textContent = `
    @keyframes floatParticle {
        0%, 100% { 
            transform: translateY(0px) translateX(0px) rotate(0deg);
            opacity: 0.8;
        }
        25% { 
            transform: translateY(-20px) translateX(10px) rotate(90deg);
            opacity: 1;
        }
        50% { 
            transform: translateY(-10px) translateX(-10px) rotate(180deg);
            opacity: 0.6;
        }
        75% { 
            transform: translateY(-30px) translateX(5px) rotate(270deg);
            opacity: 0.9;
        }
    }
    
    @keyframes imageGlow {
        0% { 
            transform: translateX(-100%);
            opacity: 0;
        }
        50% { 
            opacity: 1;
        }
        100% { 
            transform: translateX(100%);
            opacity: 0;
        }
    }
    
    @keyframes soundWave {
        0% { 
            transform: translate(-50%, -50%) scale(0.5);
            opacity: 1;
        }
        100% { 
            transform: translate(-50%, -50%) scale(3);
            opacity: 0;
        }
    }
    
    .carousel-particle {
        will-change: transform, opacity;
    }
`;
document.head.appendChild(dynamicStyles);

// ===== FUNCIONALIDAD DEL MODAL DE ESTRELLAS =====

// Funci√≥n para actualizar los indicadores del carrusel de estrellas
function updateStarsCarouselIndicators(activeIndex) {
    const indicators = document.querySelectorAll('.stars-indicators button');
    indicators.forEach((indicator, index) => {
        if (index === activeIndex) {
            indicator.classList.add('active');
        } else {
            indicator.classList.remove('active');
        }
    });
}

// Funci√≥n para crear part√≠culas de estrellas
function createStarParticle() {
    const star = document.createElement('div');
    star.innerHTML = '‚≠ê';
    star.style.position = 'fixed';
    star.style.left = Math.random() * window.innerWidth + 'px';
    star.style.top = window.innerHeight + 'px';
    star.style.fontSize = '20px';
    star.style.pointerEvents = 'none';
    star.style.zIndex = '1000';
    star.style.transition = 'all 3s ease-out';
    star.style.color = '#3B82F6';
    
    document.body.appendChild(star);
    
    setTimeout(() => {
        star.style.top = '-50px';
        star.style.opacity = '0';
        star.style.transform = 'rotate(360deg) scale(1.5)';
    }, 100);
    
    setTimeout(() => {
        if (document.body.contains(star)) {
            document.body.removeChild(star);
        }
    }, 3000);
}

// Funci√≥n simplificada para el carrusel de estrellas
function addStarsCarouselEffects() {
    // Esta funci√≥n ahora est√° integrada en addStarsCarouselNavigation
    // Solo mantener para compatibilidad
}

// Funci√≥n de touch removida - Bootstrap maneja el touch nativamente

// Funciones de efectos removidas para mejor funcionalidad del carrusel

// Funci√≥n para mejorar los indicadores del carrusel de estrellas con animaciones
function enhanceStarsIndicators() {
    const indicators = document.querySelectorAll('.stars-indicators button');
    
    indicators.forEach((indicator, index) => {
        indicator.addEventListener('mouseenter', () => {
            indicator.style.transform = 'scale(1.3) translateY(-2px)';
        });
        
        indicator.addEventListener('mouseleave', () => {
            if (!indicator.classList.contains('active')) {
                indicator.style.transform = 'scale(1) translateY(0)';
            }
        });
        
        indicator.addEventListener('click', () => {
            // A√±adir efecto de click
            indicator.style.transform = 'scale(1.1)';
            setTimeout(() => {
                if (indicator.classList.contains('active')) {
                    indicator.style.transform = 'scale(1.4) translateY(-3px)';
                } else {
                    indicator.style.transform = 'scale(1) translateY(0)';
                }
            }, 150);
        });
    });
}

// Funci√≥n de navegaci√≥n removida - ahora integrada en initStarsCarousel

// Funciones de efectos adicionales removidas para mejor funcionalidad

// Event listener para el bot√≥n de estrellas
document.addEventListener('DOMContentLoaded', function() {
    const btnStars = document.getElementById('btnStars');
    const starsModal = document.getElementById('starsModal');
    
    if (btnStars) {
        btnStars.addEventListener('click', function() {
            // Mostrar la modal
            const modal = new bootstrap.Modal(starsModal);
            modal.show();
            
            // Crear part√≠culas de estrellas
            createStarParticle();
            
            console.log('‚≠ê Modal de estrellas abierta');
        });
    }
    
    // Event listener para cuando se abre la modal
    if (starsModal) {
        starsModal.addEventListener('shown.bs.modal', function() {
            // Inicializar el carrusel cuando la modal est√© completamente visible
            setTimeout(() => {
                initStarsCarousel();
            }, 100);
        });
        
        // Event listener para cuando se cierra la modal
        starsModal.addEventListener('hidden.bs.modal', function() {
            console.log('‚≠ê Modal de estrellas cerrada');
        });
    }
});

// Funci√≥n para inicializar el carrusel de estrellas
function initStarsCarousel() {
    const starsCarousel = document.getElementById('starsCarousel');
    if (!starsCarousel) {
        console.error('‚ùå Carrusel no encontrado');
        return;
    }
    
    // Destruir instancia existente si existe
    const existingCarousel = bootstrap.Carousel.getInstance(starsCarousel);
    if (existingCarousel) {
        existingCarousel.dispose();
    }
    
    // Inicializar el carrusel de Bootstrap
    const carousel = new bootstrap.Carousel(starsCarousel, {
        interval: 5000,
        wrap: true,
        touch: true
    });
    
    console.log('‚úÖ Carrusel inicializado:', carousel);
    
    // Verificar que los elementos existen
    const prevBtn = starsCarousel.querySelector('.carousel-control-prev');
    const nextBtn = starsCarousel.querySelector('.carousel-control-next');
    const indicators = starsCarousel.querySelectorAll('.carousel-indicators button');
    
    console.log('üîç Elementos encontrados:', {
        prevBtn: !!prevBtn,
        nextBtn: !!nextBtn,
        indicators: indicators.length
    });
    
    // A√±adir event listeners manuales
    if (prevBtn) {
        prevBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('‚¨ÖÔ∏è Bot√≥n anterior clickeado');
            carousel.prev();
        });
    }
    
    if (nextBtn) {
        nextBtn.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('‚û°Ô∏è Bot√≥n siguiente clickeado');
            carousel.next();
        });
    }
    
    // Event listeners para indicadores
    indicators.forEach((indicator, index) => {
        indicator.addEventListener('click', function(e) {
            e.preventDefault();
            console.log('üîò Indicador clickeado:', index);
            carousel.to(index);
        });
    });
    
    // Event listener para actualizar indicadores y clases
    starsCarousel.addEventListener('slid.bs.carousel', function(event) {
        const activeIndex = event.to;
        console.log('üì∏ Slide cambiada a:', activeIndex);
        
        // Remover clase active de todos los items
        const allItems = starsCarousel.querySelectorAll('.carousel-item');
        allItems.forEach(item => {
            item.classList.remove('active');
        });
        
        // A√±adir clase active al item actual
        if (allItems[activeIndex]) {
            allItems[activeIndex].classList.add('active');
        }
        
        updateStarsCarouselIndicators(activeIndex);
    });
    
    // Asegurar que el primer item tenga la clase active
    const firstItem = starsCarousel.querySelector('.carousel-item');
    if (firstItem) {
        firstItem.classList.add('active');
    }
}

// Crear part√≠culas de estrellas cada cierto tiempo cuando la modal est√© abierta
setInterval(() => {
    if (document.getElementById('starsModal').classList.contains('show')) {
        createStarParticle();
    }
}, 3000);

// ===== FUNCIONALIDAD DEL BOT√ìN DE DESCARGA =====

// Funci√≥n para crear part√≠culas de corazones para el bot√≥n de descarga
function createDownloadHeartParticle() {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíö';
    heart.style.position = 'fixed';
    heart.style.left = Math.random() * window.innerWidth + 'px';
    heart.style.top = window.innerHeight + 'px';
    heart.style.fontSize = '20px';
    heart.style.pointerEvents = 'none';
    heart.style.zIndex = '1000';
    heart.style.transition = 'all 3s ease-out';
    heart.style.color = '#4CAF50';
    
    document.body.appendChild(heart);
    
    setTimeout(() => {
        heart.style.top = '-50px';
        heart.style.opacity = '0';
        heart.style.transform = 'rotate(360deg) scale(1.5)';
    }, 100);
    
    setTimeout(() => {
        if (document.body.contains(heart)) {
            document.body.removeChild(heart);
        }
    }, 3000);
}

// Funci√≥n para a√±adir efectos especiales al bot√≥n de descarga
function addDownloadButtonEffects() {
    const downloadBtn = document.getElementById('btnDownload');
    if (!downloadBtn) return;
    
    // Efecto de hover con part√≠culas
    downloadBtn.addEventListener('mouseenter', function() {
        // Crear part√≠cula de coraz√≥n
        createDownloadHeartParticle();
        
        // A√±adir efecto de brillo
        this.style.boxShadow = '0 0 20px rgba(76, 175, 80, 0.6)';
        this.style.transform = 'translateY(-2px) scale(1.02)';
    });
    
    downloadBtn.addEventListener('mouseleave', function() {
        this.style.boxShadow = '0 5px 15px rgba(76, 175, 80, 0.3)';
        this.style.transform = 'translateY(0) scale(1)';
    });
    
    // Efecto de click
    downloadBtn.addEventListener('click', function(e) {
        e.preventDefault(); // Prevenir descarga inmediata
        
        // Trackear intento de descarga
        trackUserActivity('Intento de Descarga APK');
        
        // Crear m√∫ltiples part√≠culas de corazones
        for (let i = 0; i < 3; i++) {
            setTimeout(() => {
                createDownloadHeartParticle();
            }, i * 200);
        }
        
        // Efecto de click visual
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = 'translateY(-2px) scale(1.02)';
        }, 150);
        
        // Mostrar alerta de 5 segundos
        showDownloadAlert();
    });
    
    // Efecto de focus para accesibilidad
    downloadBtn.addEventListener('focus', function() {
        this.style.boxShadow = '0 0 0 3px rgba(76, 175, 80, 0.3)';
    });
    
    downloadBtn.addEventListener('blur', function() {
        this.style.boxShadow = '0 5px 15px rgba(76, 175, 80, 0.3)';
    });
}

// Funci√≥n para mostrar alerta de descarga con mensaje sobre fuentes desconocidas
function showDownloadAlert() {
    // Crear elemento de alerta
    const alert = document.createElement('div');
    alert.innerHTML = `
        <div style="text-align: center; margin-bottom: 15px;">
            <div style="font-size: 2rem; margin-bottom: 10px;">üì±</div>
            <h4 style="color: #FCE4EC; margin-bottom: 10px; font-family: 'Playfair Display', serif;">¬°Preparando tu descarga!</h4>
            <p style="color: #333; margin-bottom: 15px; font-size: 1rem; line-height: 1.5;">
                <strong>Importante:</strong> Para instalar la aplicaci√≥n en tu tel√©fono, necesitar√°s permitir la instalaci√≥n de fuentes desconocidas en la configuraci√≥n de seguridad.
            </p>
            <div style="background: #FCE4EC; padding: 10px; border-radius: 8px; margin-bottom: 15px; border-left: 4px solid #E91E63;">
                <p style="margin: 0; font-size: 0.9rem; color: #C2185B;">
                    <strong>üí° Consejo:</strong> Ve a Configuraci√≥n > Seguridad > Fuentes desconocidas y act√≠vala para instalar.
                </p>
                <p style="margin: 0; font-size: 0.9rem; color: #C2185B;">
                    <strong>IMPORTANTE:</strong> Apenas descargues, instales y abras la aplicaci√≥n, pulsa en permitir para recibir notiticaciones(En caso de que lo pida).
                </p>
            </div>
            <div style="display: flex; justify-content: center; align-items: center; margin-top: 15px;">
                <div style="width: 20px; height: 20px; border: 3px solid #FCE4EC; border-top: 3px solid transparent; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 10px;"></div>
            </div>
        </div>
    `;
    
    alert.style.cssText = `
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: linear-gradient(45deg, #E91E63, #F06292);
        color: white;
        padding: 25px;
        border-radius: 20px;
        font-family: 'Playfair Display', serif;
        font-size: 1rem;
        font-weight: 700;
        z-index: 10000;
        box-shadow: 0 15px 35px rgba(233, 30, 99, 0.4);
        border: 3px solid rgba(255, 255, 255, 0.3);
        animation: downloadAlert 8.5s ease-out forwards;
        text-align: center;
        max-width: 350px;
        width: 85%;
    `;
    
    // A√±adir estilos de animaci√≥n
    const style = document.createElement('style');
    style.textContent = `
        @keyframes downloadAlert {
            0% {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.8);
            }
            10% {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1.05);
            }
            90% {
                opacity: 1;
                transform: translate(-50%, -50%) scale(1);
            }
            100% {
                opacity: 0;
                transform: translate(-50%, -50%) scale(0.9);
            }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    `;
    document.head.appendChild(style);
    
    document.body.appendChild(alert);
    
    // Contador regresivo
    let countdown = 8.5;
    const countdownElement = alert.querySelector('#countdown');
    
    const countdownInterval = setInterval(() => {
        countdown -= 0.5;
        if (countdownElement) {
            countdownElement.textContent = countdown.toFixed(1);
        }
        
        if (countdown <= 0) {
            clearInterval(countdownInterval);
            // Descarga directa sin ventana emergente
            const downloadLink = document.createElement('a');
            downloadLink.href = 'https://drive.google.com/drive/folders/1XmvFviMmfro9O_tKrIUSoxdGRPNwO3LM';
            downloadLink.download = 'Elizabeth_Una_Princesa.apk';
            downloadLink.target = '_self';
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }
    }, 500);
    
    // Remover despu√©s de 8.5 segundos
    setTimeout(() => {
        if (document.body.contains(alert)) {
            document.body.removeChild(alert);
        }
        if (document.head.contains(style)) {
            document.head.removeChild(style);
        }
    }, 8500);
}

// Funci√≥n para detectar si es dispositivo m√≥vil y mostrar mensaje especial
function detectMobileAndShowMessage() {
    const downloadBtn = document.getElementById('btnDownload');
    if (!downloadBtn) return;
    
    // Detectar si es m√≥vil
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || window.innerWidth <= 768;
    
    if (isMobile) {
        // Cambiar el texto del bot√≥n para m√≥viles
        downloadBtn.innerHTML = 'üì± Desc√°rgame en tu tel√©fono';
        
        // A√±adir evento especial para m√≥viles
        downloadBtn.addEventListener('click', function(e) {
            // Crear part√≠culas especiales para m√≥viles
            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    createDownloadHeartParticle();
                }, i * 100);
            }
            
            // Mostrar mensaje especial para m√≥viles
            const mobileMessage = document.createElement('div');
            mobileMessage.innerHTML = 'üíö ¬°Perfecto! Me llevas contigo a donde vayas üíö';
            mobileMessage.style.cssText = `
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: linear-gradient(45deg, #4CAF50, #66BB6A);
                color: white;
                padding: 15px 25px;
                border-radius: 20px;
                font-family: 'Playfair Display', serif;
                font-size: 1rem;
                font-weight: 700;
                z-index: 10000;
                box-shadow: 0 8px 25px rgba(76, 175, 80, 0.5);
                border: 2px solid rgba(255, 255, 255, 0.3);
                animation: mobileMessage 4s ease-out forwards;
                text-align: center;
                max-width: 90%;
            `;
            
            // A√±adir animaci√≥n para m√≥viles
            const mobileStyle = document.createElement('style');
            mobileStyle.textContent = `
                @keyframes mobileMessage {
                    0% {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-20px);
                    }
                    20% {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                    80% {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                    100% {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-20px);
                    }
                }
            `;
            document.head.appendChild(mobileStyle);
            
            document.body.appendChild(mobileMessage);
            
            // Remover despu√©s de 4 segundos
            setTimeout(() => {
                if (document.body.contains(mobileMessage)) {
                    document.body.removeChild(mobileMessage);
                }
                if (document.head.contains(mobileStyle)) {
                    document.head.removeChild(mobileStyle);
                }
            }, 4000);
        });
    }
}

// Funci√≥n para inicializar el carrusel de princess correctamente
function initializePrincessCarousel() {
    const carousel = document.getElementById('princessCarousel');
    if (carousel) {
        // Limpiar cualquier instancia previa
        const existingCarousel = bootstrap.Carousel.getInstance(carousel);
        if (existingCarousel) {
            existingCarousel.dispose();
        }
        
        // Asegurar que solo la primera imagen est√© activa
        const allItems = carousel.querySelectorAll('.carousel-item');
        allItems.forEach((item, index) => {
            item.classList.remove('active');
            if (index === 0) {
                item.classList.add('active');
            }
        });
        
        // Inicializar el carrusel con configuraci√≥n espec√≠fica
        const bsCarousel = new bootstrap.Carousel(carousel, {
            interval: 4000,
            ride: 'carousel',
            wrap: true
        });
        
        // Forzar que vaya al primer slide
        bsCarousel.to(0);
        
        console.log('üé† Carrusel de Princess inicializado correctamente');
        console.log('üì∏ Total de im√°genes:', allItems.length);
        console.log('üñºÔ∏è Imagen activa:', allItems[0].querySelector('img').alt);
    }
}

// Funci√≥n para mostrar el mensaje de invitaci√≥n de la princesa
function showPrincessInvitation() {
    // Crear la burbuja de invitaci√≥n
    const invitationBubble = document.createElement('div');
    invitationBubble.className = 'princess-invitation-bubble';
    invitationBubble.innerHTML = `
        <div class="bubble-arrow-left"></div>
        <div class="bubble-text">
            üëë ¬°Pulsame!, tengo algo muy especial que decirte... üíï
        </div>
    `;
    
    // Obtener la posici√≥n de la princesa
    const princessImg = document.querySelector('.princess-icon');
    if (!princessImg) {
        console.log('No se encontr√≥ la imagen de la princesa');
        return;
    }
    
    const princessRect = princessImg.getBoundingClientRect();
    
    // Detectar si es m√≥vil
    const isMobile = window.innerWidth <= 768;
    
    // Calcular ancho din√°mico
    const textLength = "üëë ¬°Pulsame!, tengo algo muy especial que decirte... üíï".length;
    const maxWidth = isMobile ? Math.min(window.innerWidth - 40, 300) : 320;
    const bubbleWidth = Math.min(Math.max(textLength * 8, 200), maxWidth);
    
    // Calcular posici√≥n seg√∫n el dispositivo
    let bubbleLeft, bubbleTop;
    if (isMobile) {
        // En m√≥vil: centrar horizontalmente y posicionar abajo
        bubbleLeft = princessRect.left + (princessRect.width / 2) - (bubbleWidth / 2);
        bubbleTop = princessRect.bottom + 10;
    } else {
        // En desktop: a la derecha de la princesa
        bubbleLeft = princessRect.right + 10;
        bubbleTop = princessRect.top + (princessRect.height / 2) - 50;
    }
    
    // Agregar estilos inline para la burbuja de invitaci√≥n
    invitationBubble.style.cssText = `
        position: fixed !important;
        top: ${bubbleTop}px !important;
        left: ${bubbleLeft}px !important;
        background: linear-gradient(135deg, #FFE4E1, #FFB6C1) !important;
        border: 3px solid #FF69B4 !important;
        border-radius: 20px !important;
        padding: 12px !important;
        box-shadow: 0 10px 30px rgba(255, 105, 180, 0.4) !important;
        z-index: 9999 !important;
        max-width: ${bubbleWidth}px !important;
        width: ${bubbleWidth}px !important;
        font-family: 'Dancing Script', cursive !important;
        font-size: 1.1rem !important;
        color: #8B008B !important;
        text-align: center !important;
        line-height: 1.4 !important;
        pointer-events: none !important;
        opacity: 1 !important;
        visibility: visible !important;
        display: block !important;
        animation: invitationPulse 2s ease-in-out infinite !important;
    `;
    
    // Agregar estilos para la flecha de invitaci√≥n
    const arrow = invitationBubble.querySelector('.bubble-arrow-left');
    if (arrow) {
        if (isMobile) {
            // En m√≥vil: flecha apuntando hacia arriba
            arrow.style.cssText = `
                position: absolute !important;
                left: 50% !important;
                top: -10px !important;
                transform: translateX(-50%) !important;
                width: 0 !important;
                height: 0 !important;
                border-left: 10px solid transparent !important;
                border-right: 10px solid transparent !important;
                border-bottom: 10px solid #FF69B4 !important;
            `;
        } else {
            // En desktop: flecha apuntando hacia la izquierda
            arrow.style.cssText = `
                position: absolute !important;
                left: -10px !important;
                top: 50% !important;
                transform: translateY(-50%) !important;
                width: 0 !important;
                height: 0 !important;
                border-top: 10px solid transparent !important;
                border-bottom: 10px solid transparent !important;
                border-right: 10px solid #FF69B4 !important;
            `;
        }
    }
    
    // Agregar estilos para el texto de invitaci√≥n
    const textElement = invitationBubble.querySelector('.bubble-text');
    if (textElement) {
        textElement.style.cssText = `
            margin: 0 !important;
            padding: 0 !important;
            display: block !important;
            width: 100% !important;
        `;
    }
    
    // Agregar la burbuja de invitaci√≥n al body
    document.body.appendChild(invitationBubble);
    console.log('üëë Mensaje de invitaci√≥n de la princesa mostrado');
    
    // Remover la burbuja de invitaci√≥n despu√©s de 6 segundos
    setTimeout(() => {
        if (invitationBubble.parentNode) {
            invitationBubble.style.opacity = '0';
            invitationBubble.style.transform = 'scale(0.8)';
            setTimeout(() => {
                if (invitationBubble.parentNode) {
                    invitationBubble.parentNode.removeChild(invitationBubble);
                    console.log('üëë Mensaje de invitaci√≥n removido');
                }
            }, 500);
        }
    }, 6000);
}

// Funci√≥n para abrir el modal de princess autom√°ticamente
function openPrincessModal() {
    // Esperar un poco para que la p√°gina se cargue completamente
    setTimeout(() => {
        const princessModal = new bootstrap.Modal(document.getElementById('princessModal'));
        princessModal.show();
        console.log('üëë Modal de Princess abierto autom√°ticamente');
    }, 1000); // 1 segundo de delay para que se vea mejor
}

// Funci√≥n para abrir el modal de princess desde el bot√≥n Tour de Amor
function openPrincessModalFromTour() {
    // Crear part√≠culas de corazones azules antes de abrir la modal
    for (let i = 0; i < 5; i++) {
        setTimeout(() => {
            createTourHeartParticle();
        }, i * 100);
    }
    
    // Abrir la modal de Princess inmediatamente
    const princessModal = new bootstrap.Modal(document.getElementById('princessModal'));
    princessModal.show();
    
    // Inicializar el carrusel cuando la modal est√© completamente visible
    setTimeout(() => {
        initializePrincessCarousel();
    }, 200);
    
    console.log('üíô Modal de Princess abierto desde Tour de Amor');
}

// Inicializar efectos del bot√≥n de descarga
document.addEventListener('DOMContentLoaded', function() {
    // Sistema de notificaciones simplificado (sin env√≠o de email)
    
    // Trackear que la aplicaci√≥n se abri√≥
    trackUserActivity('Aplicaci√≥n Abierta', {
        timestamp: new Date().toLocaleString('es-ES'),
        device: getDeviceInfo(),
        url: window.location.href
    });
    
    addDownloadButtonEffects();
    detectMobileAndShowMessage();
    
    // Configurar evento para reinicializar carrusel cuando se abra el modal
    const princessModal = document.getElementById('princessModal');
    if (princessModal) {
        princessModal.addEventListener('shown.bs.modal', function() {
            console.log('üé† Modal de Princess abierto, inicializando carrusel...');
            trackUserActivity('Modal Princess Abierto', { source: 'autom√°tico' });
            setTimeout(() => {
                initializePrincessCarousel();
            }, 200);
        });
        
        princessModal.addEventListener('hidden.bs.modal', function() {
            trackUserActivity('Modal Princess Cerrado');
        });
    }
    
    // Mostrar mensaje de invitaci√≥n de la princesa despu√©s de 3 segundos
    setTimeout(() => {
        showPrincessInvitation();
    }, 3000);
    
    console.log('üì± Bot√≥n de descarga inicializado');
    console.log('üëë Mensaje de invitaci√≥n de la princesa configurado');
    
    // Inicializar bot√≥n de tour de amor
    initializeTourButton();
    
    // Enviar resumen cada 5 minutos
    setInterval(sendActivitySummary, 5 * 60 * 1000);
    
    // Enviar resumen cuando se cierre la p√°gina
    window.addEventListener('beforeunload', function() {
        sendActivitySummary();
    });
});

// ===== SISTEMA SIMPLIFICADO (SIN ENV√çO DE EMAIL) =====

// Funci√≥n para obtener informaci√≥n del dispositivo
function getDeviceInfo() {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isTablet = /iPad|Android/i.test(navigator.userAgent) && window.innerWidth >= 768;
    const screenSize = `${window.innerWidth}x${window.innerHeight}`;
    
    return {
        type: isMobile ? (isTablet ? 'Tablet' : 'M√≥vil') : 'Desktop',
        screen: screenSize,
        platform: navigator.platform,
        language: navigator.language
    };
}

// Funci√≥n para trackear actividad del usuario
function trackUserActivity(action, details = {}) {
    const activity = {
        action: action,
        timestamp: new Date().toISOString(),
        details: details,
        sessionId: getSessionId()
    };
    
    // Guardar en localStorage para persistencia
    const activities = JSON.parse(localStorage.getItem('userActivities') || '[]');
    activities.push(activity);
    
    // Mantener solo las √∫ltimas 50 actividades
    if (activities.length > 50) {
        activities.splice(0, activities.length - 50);
    }
    
    localStorage.setItem('userActivities', JSON.stringify(activities));
    
    // Sin env√≠o de email para evitar errores 400
    
    console.log('üìä Actividad registrada:', activity);
}

// Funci√≥n para generar ID de sesi√≥n
function getSessionId() {
    let sessionId = sessionStorage.getItem('sessionId');
    if (!sessionId) {
        sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
        sessionStorage.setItem('sessionId', sessionId);
    }
    return sessionId;
}

// Funci√≥n para enviar resumen de actividades
function sendActivitySummary() {
    const activities = JSON.parse(localStorage.getItem('userActivities') || '[]');
    if (activities.length === 0) return;
    
    const summary = {
        totalActivities: activities.length,
        sessionId: getSessionId(),
        firstActivity: activities[0].timestamp,
        lastActivity: activities[activities.length - 1].timestamp,
        activities: activities.map(a => ({
            action: a.action,
            time: new Date(a.timestamp).toLocaleString('es-ES')
        }))
    };
    
    // Sin env√≠o de email para evitar errores 400
    console.log('üìä Resumen de actividades:', summary);
    
    // Limpiar actividades despu√©s de enviar
    localStorage.removeItem('userActivities');
}

// ===== FUNCIONALIDAD DEL BOT√ìN TOUR DE AMOR =====

// Funci√≥n para crear part√≠culas de corazones azules para el bot√≥n de tour
function createTourHeartParticle() {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíô';
    heart.style.position = 'fixed';
    heart.style.left = Math.random() * window.innerWidth + 'px';
    heart.style.top = window.innerHeight + 'px';
    heart.style.fontSize = '20px';
    heart.style.pointerEvents = 'none';
    heart.style.zIndex = '1000';
    heart.style.transition = 'all 3s ease-out';
    heart.style.color = '#87CEEB';
    
    document.body.appendChild(heart);
    
    setTimeout(() => {
        heart.style.top = '-50px';
        heart.style.opacity = '0';
        heart.style.transform = 'rotate(360deg) scale(1.5)';
    }, 100);
    
    setTimeout(() => {
        if (document.body.contains(heart)) {
            document.body.removeChild(heart);
        }
    }, 3000);
}


// Funci√≥n para inicializar el bot√≥n de tour
function initializeTourButton() {
    const tourBtn = document.getElementById('btnTour');
    if (!tourBtn) return;
    
    // Efecto de hover con part√≠culas
    tourBtn.addEventListener('mouseenter', function() {
        // Crear part√≠cula de coraz√≥n azul
        createTourHeartParticle();
        
        // A√±adir efecto de brillo
        this.style.boxShadow = '0 0 20px rgba(135, 206, 235, 0.6)';
        this.style.transform = 'translateY(-2px) scale(1.02)';
    });
    
    tourBtn.addEventListener('mouseleave', function() {
        this.style.boxShadow = '0 5px 15px rgba(135, 206, 235, 0.3)';
        this.style.transform = 'translateY(0) scale(1)';
    });
    
    // Efecto de click
    tourBtn.addEventListener('click', function(e) {
        e.preventDefault();
        
        // Trackear click en tour de amor
        trackUserActivity('Tour de Amor Clicked');
        
        // Crear m√∫ltiples part√≠culas de corazones azules
        for (let i = 0; i < 3; i++) {
            setTimeout(() => {
                createTourHeartParticle();
            }, i * 200);
        }
        
        // Efecto de click visual
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
            this.style.transform = 'translateY(-2px) scale(1.02)';
        }, 150);
        
        // Abrir la modal de Princess
        openPrincessModalFromTour();
    });
    
    // Efecto de focus para accesibilidad
    tourBtn.addEventListener('focus', function() {
        this.style.boxShadow = '0 0 0 3px rgba(135, 206, 235, 0.3)';
    });
    
    tourBtn.addEventListener('blur', function() {
        this.style.boxShadow = '0 5px 15px rgba(135, 206, 235, 0.3)';
    });
    
    console.log('üíô Bot√≥n Tour de Amor inicializado - Abre la modal de Princess');
}
