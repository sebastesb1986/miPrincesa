// Textos rom√°nticos para cada imagen del cuento
const textos = [
    "Yo quiero que seas como Cenicienta, mi princesa de los cuentos de hadas",
    "Ser aquel que ponga en tu pie, la zapatilla de cristal del amor eterno",
    "Como un cuento de hadas, te quiero contar todo lo que siento por ti",
    "Esa mirada dulce y m√°gica a m√≠ me congela el coraz√≥n de amor",
    "Quisiera ser el genio que concede todos tus deseos y sue√±os",
    "Yo quiero que t√∫ seas mi princesa, que t√∫ seas la bella y yo la bestia que se transforma con tu amor",
    "Y solo con tus besos me iluminas y me llenas de felicidad infinita",
    "Y que despiertes de tus sue√±os solo con mis besos de amor verdadero",
    "¬øQuieres saber qu√© pas√≥ recorriendo otros reinos? Todo lo hice por ti, mi amor"
];

// Elementos del DOM
const descripcion = document.getElementById('descripcion-text');
const descripcion_a = document.getElementById('descripcion-text-a');
const ourSpace = document.getElementById('our_space');

// Variables globales para los audios
let audioCuento = null;
let audioPienso = null;
let btnCuento = null;
let btnPienso = null;

// Funci√≥n para actualizar los indicadores del carrusel
function updateCarouselIndicators(activeIndex) {
    const indicators = document.querySelectorAll('.carousel-indicators button');
    indicators.forEach((indicator, index) => {
        if (index === activeIndex) {
            indicator.classList.add('active');
        } else {
            indicator.classList.remove('active');
        }
    });
}

// Funci√≥n para detener todos los audios
function stopAllAudios() {
    if (audioCuento && !audioCuento.paused) {
        audioCuento.pause();
        audioCuento.currentTime = 0;
        btnCuento.innerHTML = '‚ñ∂Ô∏è Cu√©ntame la Historia';
        btnCuento.style.background = 'linear-gradient(45deg, #DC2626, #B91C1C)';
    }
    
    if (audioPienso && !audioPienso.paused) {
        audioPienso.pause();
        audioPienso.currentTime = 0;
        btnPienso.innerHTML = 'üíù ¬øQu√© Significas para M√≠?';
        btnPienso.style.background = 'linear-gradient(45deg, #3B82F6, #1D4ED8)';
    }
}

// Funci√≥n para cambiar el texto de acuerdo a la imagen activa
document.getElementById('carouselExampleAutoplaying').addEventListener('slide.bs.carousel', function (event) {
    // Obtener el √≠ndice de la imagen activa
    let index = event.to;
    
    // Aseg√∫rate de que el √≠ndice est√© dentro del rango correcto
    if (index >= textos.length) {
        index = 0;
    }

    // Actualizar los indicadores del carrusel
    updateCarouselIndicators(index);

    // Cambiar el texto seg√∫n el √≠ndice de la imagen con efecto de transici√≥n
    descripcion.style.opacity = '0';
    descripcion.style.transform = 'translateY(-10px)';
    
    setTimeout(() => {
        descripcion.textContent = textos[index];
        descripcion.style.opacity = '1';
        descripcion.style.transform = 'translateY(0)';
    }, 300);

    // Verificar si ya hemos insertado el contenido en #our_space, para evitar duplicados
    if (index === textos.length - 1) {
        // Cambiar el texto del p√°rrafo por el nuevo contenido con estilo de enlace
        descripcion_a.innerHTML = `
            <div style="background: linear-gradient(135deg, rgba(30, 58, 138, 0.1), rgba(59, 130, 246, 0.1)); 
                        padding: 20px; border-radius: 15px; border-left: 4px solid var(--accent-color);">
                <p style="font-family: 'Dancing Script', cursive; font-size: 1.4rem; color: var(--primary-color); 
                          text-align: center; margin-bottom: 15px;">
                    ¬°Descubre mis aventuras por el mundo!
                </p>
                <a href="pages/vida.html" class="nav-link" style="display: inline-block; margin: 0;">
                    üåç Ver Mis Viajes por Ti
                </a>
            </div>
        `;
    } else {
        // Volver al texto original si no estamos en el √∫ltimo texto
        descripcion_a.innerHTML = `
            <p style="font-family: 'Dancing Script', cursive; font-size: 1.4rem; color: var(--secondary-color); 
                      text-align: center; margin: 0;">
                L√©eme hasta el final para descubrir m√°s...
            </p>
        `;
    }
});

// Evento para cuando el carrusel termine de cambiar
document.getElementById('carouselExampleAutoplaying').addEventListener('slid.bs.carousel', function (event) {
    // Obtener el √≠ndice de la imagen activa despu√©s del cambio
    let index = event.to;
    
    // Asegurarse de que los indicadores est√©n sincronizados
    updateCarouselIndicators(index);
});

// Funci√≥n para reproducir el audio del cuento
document.addEventListener('DOMContentLoaded', function () {
    btnCuento = document.getElementById('btnPlayAudio');
    audioCuento = document.getElementById('audio-cuento');

    btnCuento.addEventListener('click', function () {
        if (audioCuento.paused) {
            // Detener el otro audio antes de reproducir este
            stopAllAudios();
            
            audioCuento.play()
                .then(() => {
                    btnCuento.innerHTML = '‚è∏Ô∏è Pausar Historia';
                    btnCuento.style.background = 'linear-gradient(45deg, #B91C1C, #991B1B)';
                    // A√±adir efecto visual
                    btnCuento.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        btnCuento.style.transform = 'scale(1)';
                    }, 200);
                })
                .catch(error => {
                    console.error('No se pudo reproducir el audio:', error);
                    btnCuento.innerHTML = '‚ùå Error de Audio';
                });
        } else {
            audioCuento.pause();
            btnCuento.innerHTML = '‚ñ∂Ô∏è Cu√©ntame la Historia';
            btnCuento.style.background = 'linear-gradient(45deg, #DC2626, #B91C1C)';
        }
    });

    // Evento para cuando el audio termine
    audioCuento.addEventListener('ended', function() {
        btnCuento.innerHTML = 'üîÑ Repetir Historia';
        btnCuento.style.background = 'linear-gradient(45deg, #059669, #047857)';
    });
});

// Funci√≥n para reproducir el audio de "qu√© significas para m√≠"
document.addEventListener('DOMContentLoaded', function () {
    btnPienso = document.getElementById('btnPlayAudio2');
    audioPienso = document.getElementById('audio-pienso');

    btnPienso.addEventListener('click', function () {
        if (audioPienso.paused) {
            // Detener el otro audio antes de reproducir este
            stopAllAudios();
            
            audioPienso.play()
                .then(() => {
                    btnPienso.innerHTML = '‚è∏Ô∏è Pausar Significado';
                    btnPienso.style.background = 'linear-gradient(45deg, #1D4ED8, #1E40AF)';
                    // A√±adir efecto visual
                    btnPienso.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        btnPienso.style.transform = 'scale(1)';
                    }, 200);
                })
                .catch(error => {
                    console.error('No se pudo reproducir el audio:', error);
                    btnPienso.innerHTML = '‚ùå Error de Audio';
                });
        } else {
            audioPienso.pause();
            btnPienso.innerHTML = 'üíù ¬øQu√© Significas para M√≠?';
            btnPienso.style.background = 'linear-gradient(45deg, #3B82F6, #1D4ED8)';
        }
    });

    // Evento para cuando el audio termine
    audioPienso.addEventListener('ended', function() {
        btnPienso.innerHTML = 'üîÑ Repetir Significado';
        btnPienso.style.background = 'linear-gradient(45deg, #059669, #047857)';
    });
});

// Funci√≥n para a√±adir efectos visuales al carrusel
document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('carouselExampleAutoplaying');
    
    carousel.addEventListener('slide.bs.carousel', function (event) {
        // A√±adir efecto de brillo a la imagen activa
        const activeItem = carousel.querySelector('.carousel-item.active');
        if (activeItem) {
            activeItem.style.boxShadow = '0 0 30px rgba(30, 58, 138, 0.6)';
            activeItem.style.transform = 'scale(1.02)';
        }
    });
    
    carousel.addEventListener('slid.bs.carousel', function (event) {
        // Remover efectos de la imagen anterior
        const allItems = carousel.querySelectorAll('.carousel-item');
        allItems.forEach(item => {
            item.style.boxShadow = 'none';
            item.style.transform = 'scale(1)';
        });
        
        // Aplicar efectos a la nueva imagen activa
        const newActiveItem = carousel.querySelector('.carousel-item.active');
        if (newActiveItem) {
            newActiveItem.style.boxShadow = '0 0 30px rgba(30, 58, 138, 0.6)';
            newActiveItem.style.transform = 'scale(1.02)';
        }
    });
});

// Funci√≥n para a√±adir efectos de part√≠culas rom√°nticas
function createHeartParticle() {
    const heart = document.createElement('div');
    heart.innerHTML = 'üíô';
    heart.style.position = 'fixed';
    heart.style.left = Math.random() * window.innerWidth + 'px';
    heart.style.top = window.innerHeight + 'px';
    heart.style.fontSize = '20px';
    heart.style.pointerEvents = 'none';
    heart.style.zIndex = '1000';
    heart.style.transition = 'all 3s ease-out';
    
    document.body.appendChild(heart);
    
    setTimeout(() => {
        heart.style.top = '-50px';
        heart.style.opacity = '0';
        heart.style.transform = 'rotate(360deg)';
    }, 100);
    
    setTimeout(() => {
        document.body.removeChild(heart);
    }, 3000);
}

// Crear part√≠culas de corazones cada cierto tiempo
setInterval(createHeartParticle, 5000);

// Funci√≥n para a√±adir efectos de escritura al texto
function typeWriter(element, text, speed = 50) {
    let i = 0;
    element.innerHTML = '';
    
    function type() {
        if (i < text.length) {
            element.innerHTML += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }
    
    type();
}

// Aplicar efecto de escritura al t√≠tulo principal cuando se carga la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    const title = document.querySelector('h1');
    if (title) {
        const originalText = title.textContent;
        typeWriter(title, originalText, 100);
    }
});

// Funci√≥n para a√±adir efectos de brillo a los botones
document.addEventListener('DOMContentLoaded', function() {
    const buttons = document.querySelectorAll('.btn');
    
    buttons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.boxShadow = '0 0 20px rgba(30, 58, 138, 0.6)';
        });
        
        button.addEventListener('mouseleave', function() {
            this.style.boxShadow = '0 5px 15px rgba(0, 0, 0, 0.2)';
        });
    });
});

// Inicializar los indicadores del carrusel al cargar la p√°gina
document.addEventListener('DOMContentLoaded', function() {
    // Establecer el primer indicador como activo por defecto
    updateCarouselIndicators(0);
});

// ===== FUNCIONALIDAD DEL or√°culo =====

// Base de datos de respuestas del or√°culo
const oraculaResponses = {
    "¬øQuieres saber qu√© siente tu Sebas Nucita por ti?": {
        answer: "¬°Te quiere, te piensa y te extra√±a! üíô‚ú®",
        followUps: [
            "¬øTe gustar√≠a saber m√°s detalles sobre sus sentimientos?",
            "¬øQuieres que profundice en alg√∫n aspecto espec√≠fico?",
            "¬øTe interesa conocer m√°s sobre su coraz√≥n?"
        ]
    },
    "¬øTe extra√±a mucho?": {
        answer: "¬°S√≠! Cada d√≠a que pasa sin verte es como una eternidad para √©l. Te piensa constantemente y sue√±a con el momento de volver a estar juntos. üåôüí≠",
        followUps: [
            "¬øQuieres saber qu√© m√°s siente por ti?",
            "¬øTe gustar√≠a conocer m√°s sobre sus sue√±os?",
            "¬øQuieres que te cuente m√°s sobre su a√±oranza?"
        ]
    },
    "¬øRealmente me quiere?": {
        answer: "¬°Con toda su alma! Eres su princesa, su todo, su raz√≥n de ser. Cada latido de su coraz√≥n late por ti y solo por ti. üíñüëë",
        followUps: [
            "¬øTe gustar√≠a conocer m√°s sobre su amor?",
            "¬øQuieres que profundice en la intensidad de sus sentimientos?",
            "¬øTe interesa saber m√°s sobre su devoci√≥n?"
        ]
    },
    "¬øMe piensa todos los d√≠as?": {
        answer: "¬°Absolutamente! Desde que amanece hasta que se duerme, eres el primer y √∫ltimo pensamiento de cada d√≠a. Eres su inspiraci√≥n y su felicidad. üåÖüåô",
        followUps: [
            "¬øQuieres saber m√°s sobre sus pensamientos?",
            "¬øTe gustar√≠a conocer m√°s sobre su inspiraci√≥n?",
            "¬øQuieres que te cuente m√°s sobre su felicidad?"
        ]
    },
    "¬øCu√°ndo volver√°?": {
        answer: "¬°Pronto, muy pronto. Cada paso que da en sus viajes es un paso m√°s cerca de ti. Est√° trabajando para construir un futuro juntos. üöÄüí´",
        followUps: [
            "¬øTe gustar√≠a saber m√°s sobre sus planes?",
            "¬øQuieres conocer m√°s sobre su trabajo?",
            "¬øTe interesa saber m√°s sobre el futuro que planea?"
        ]
    },
    "¬øSoy especial para √©l?": {
        answer: "¬°Eres √öNICA! No hay nadie como t√∫ en todo el universo. Eres su tesoro m√°s preciado, su amor verdadero, su destino. üåüüíé",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre lo especial que eres?",
            "¬øTe gustar√≠a conocer m√°s sobre tu unicidad?",
            "¬øQuieres que profundice en lo que te hace especial?"
        ]
    },
    "¬øMe extra√±a f√≠sicamente?": {
        answer: "¬°Por supuesto! Extra√±a tu sonrisa, tu mirada, tu voz, tu presencia. Cada abrazo, cada beso, cada momento juntos es un tesoro para √©l. ü§óüíã",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre lo que extra√±a?",
            "¬øTe gustar√≠a saber m√°s sobre sus recuerdos?",
            "¬øQuieres conocer m√°s sobre sus momentos especiales?"
        ]
    },
    "¬øSoy su persona favorita?": {
        answer: "¬°Eres su TODO! Su persona favorita, su amor verdadero, su compa√±era de vida. No hay nadie que pueda reemplazarte en su coraz√≥n. üíùüëë",
        followUps: [
            "¬øQuieres que te cuente m√°s sobre lo importante que eres?",
            "¬øTe gustar√≠a conocer m√°s sobre tu lugar en su vida?",
            "¬øQuieres que profundice en tu importancia para √©l?"
        ]
    },
    "¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita?": {
        answer: "¬°Por supuesto! El or√°culo siente que tienes algo importante que decirle. ¬øTe gustar√≠a enviarle un mensaje directo a tu Sebas Nucita? üíå‚ú®",
        followUps: [
            "¬øQuieres que te ayude a contactarlo?",
            "¬øTe gustar√≠a enviarle un mensaje especial?",
            "¬øQuieres que el or√°culo te gu√≠e para comunicarte con √©l?"
        ]
    }
};

// Preguntas programadas para mostrar
const programmedQuestions = [
    "¬øQuieres saber qu√© siente tu Sebas Nucita por ti?",
    "¬øTe extra√±a mucho?",
    "¬øRealmente me quiere?",
    "¬øMe piensa todos los d√≠as?",
    "¬øCu√°ndo volver√°?",
    "¬øSoy especial para √©l?",
    "¬øMe extra√±a f√≠sicamente?",
    "¬øSoy su persona favorita?",
    "¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita?"
];

// Funci√≥n para mostrar mensaje en el chat
function addMessage(text, type = 'oracle') {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = text;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Funci√≥n para mostrar preguntas programadas
function showProgrammedQuestions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    programmedQuestions.forEach(question => {
        const questionBtn = document.createElement('button');
        questionBtn.className = 'question-btn';
        questionBtn.textContent = question;
        questionBtn.addEventListener('click', () => handleQuestionClick(question));
        chatQuestions.appendChild(questionBtn);
    });
}

// Funci√≥n para manejar el clic en una pregunta
function handleQuestionClick(question) {
    // Mostrar la pregunta del usuario
    addMessage(question, 'user');
    
    // Verificar si es la pregunta de WhatsApp
    if (question === "¬øDeseas saber algo m√°s o decirle algo a Sebas Nucita?") {
        handleWhatsAppQuestion();
        return;
    }
    
    // Obtener la respuesta del or√°culo
    const response = oraculaResponses[question];
    
    if (response) {
        // Mostrar la respuesta principal
        setTimeout(() => {
            addMessage(response.answer, 'oracle');
        }, 500);
        
        // Mostrar pregunta de seguimiento aleatoria si existe
        if (response.followUps && response.followUps.length > 0) {
            setTimeout(() => {
                const randomFollowUp = response.followUps[Math.floor(Math.random() * response.followUps.length)];
                addMessage(randomFollowUp, 'oracle');
                
                // Mostrar botones de respuesta S√≠/No
                showYesNoButtons();
            }, 1000);
        }
    } else {
        // Respuesta gen√©rica si no hay respuesta espec√≠fica
        setTimeout(() => {
            addMessage("El or√°culo est√° meditando sobre tu pregunta... D√©jame consultar las estrellas del amor. ‚ú®üí´", 'oracle');
        }, 500);
    }
}

// Funci√≥n para mostrar botones S√≠/No
function showYesNoButtons() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const yesBtn = document.createElement('button');
    yesBtn.className = 'question-btn yes-btn';
    yesBtn.textContent = 'S√≠, cu√©ntame m√°s üíñ';
    yesBtn.addEventListener('click', () => handleYesResponse());
    
    const noBtn = document.createElement('button');
    noBtn.className = 'question-btn no-btn';
    noBtn.textContent = 'No, gracias üíô';
    noBtn.addEventListener('click', () => handleNoResponse());
    
    chatQuestions.appendChild(yesBtn);
    chatQuestions.appendChild(noBtn);
}

// Funci√≥n para manejar respuesta "S√≠"
function handleYesResponse() {
    addMessage('S√≠, cu√©ntame m√°s üíñ', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! D√©jame consultar m√°s profundamente en el coraz√≥n de tu Sebas Nucita... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('El or√°culo te revela que tu Sebas Nucita te extra√±a profundamente... üåôüí≠', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar de la distancia y el silencio, su coraz√≥n late por ti cada segundo. Te piensa constantemente, en cada momento del d√≠a. üíô‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('Eres su pensamiento m√°s dulce, su recuerdo m√°s preciado. Aunque no lo diga, su alma grita por volver a estar contigo. üåüüí´', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('El or√°culo siente que √©l desea romper ese silencio, pero necesita una se√±al de que t√∫ tambi√©n lo extra√±as... üîÆüíï', 'oracle');
                        
                        setTimeout(() => {
                            addMessage('¬øTe gustar√≠a que el or√°culo te d√© m√°s detalles sobre lo que siente por ti? üí≠‚ú®', 'oracle');
                            showDetailedOptions();
                        }, 1500);
                    }, 1500);
                }, 1500);
            }, 1500);
        }, 1000);
    }, 500);
}

// Funci√≥n para mostrar opciones detalladas
function showDetailedOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const options = [
        { text: '¬øQu√© m√°s siente por m√≠? üí≠', action: 'feelings' },
        { text: '¬øC√≥mo me extra√±a? üåô', action: 'missing' },
        { text: '¬øQu√© piensa de m√≠? üí´', action: 'thoughts' },
        { text: '¬øPor qu√© no me busca? üîç', action: 'search' },
        { text: '¬øCu√°ndo volver√°? üöÄ', action: 'return' }
    ];
    
    options.forEach(option => {
        const optionBtn = document.createElement('button');
        optionBtn.className = 'question-btn detailed-btn';
        optionBtn.textContent = option.text;
        optionBtn.addEventListener('click', () => handleDetailedOption(option.action));
        chatQuestions.appendChild(optionBtn);
    });
}

// Funci√≥n para manejar opciones detalladas
function handleDetailedOption(action) {
    switch(action) {
        case 'feelings':
            handleFeelingsResponse();
            break;
        case 'missing':
            handleMissingResponse();
            break;
        case 'thoughts':
            handleThoughtsResponse();
            break;
        case 'search':
            handleSearchResponse();
            break;
        case 'return':
            handleReturnResponse();
            break;
    }
}

// Funci√≥n para manejar respuesta "No"
function handleNoResponse() {
    addMessage('No, gracias üíô', 'user');
    
    setTimeout(() => {
        addMessage('¬°Entendido! El or√°culo respeta tu decisi√≥n. üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Recuerda siempre que eres la princesa de su coraz√≥n, y que te quiere m√°s all√° de las estrellas. üëëüíñ', 'oracle');
            
            setTimeout(() => {
                addMessage('¬øTe gustar√≠a hacer otra pregunta diferente? üîÆ', 'oracle');
                showProgrammedQuestions();
            }, 2000);
        }, 1000);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre sentimientos
function handleFeelingsResponse() {
    addMessage('¬øQu√© m√°s siente por m√≠? üí≠', 'user');
    
    setTimeout(() => {
        addMessage('El or√°culo revela que tu Sebas Nucita siente por ti algo m√°s profundo que el amor... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Te quiere con una intensidad que no puede explicar. Eres su raz√≥n de ser, su felicidad, su paz interior. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('Aunque est√©n distanciados, su coraz√≥n sigue siendo tuyo. Te extra√±a, te piensa, y desea estar contigo m√°s que nada en el mundo. üíïüåô', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a saber m√°s sobre c√≥mo te extra√±a? üåôüí≠', 'oracle');
                    showBackToOptions();
                }, 2000);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre extra√±anza
function handleMissingResponse() {
    addMessage('¬øC√≥mo me extra√±a? üåô', 'user');
    
    setTimeout(() => {
        addMessage('El or√°culo siente que tu Sebas Nucita te extra√±a de una manera muy especial... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Te extra√±a tu sonrisa, tu mirada, tu voz. Te extra√±a cada momento juntos, cada risa compartida. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar del silencio, su coraz√≥n late por ti. Te piensa en cada amanecer y en cada atardecer. üíïüåÖ', 'oracle');
                
                setTimeout(() => {
                    addMessage('El or√°culo siente que √©l desea romper ese silencio, pero necesita saber que t√∫ tambi√©n lo extra√±as... üîÆüí≠', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('¬øTe gustar√≠a saber m√°s sobre lo que piensa de ti? üí´‚ú®', 'oracle');
                        showBackToOptions();
                    }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre pensamientos
function handleThoughtsResponse() {
    addMessage('¬øQu√© piensa de m√≠? üí´', 'user');
    
    setTimeout(() => {
        addMessage('El or√°culo revela que tu Sebas Nucita piensa en ti como en su tesoro m√°s preciado... üíé‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Para √©l, eres perfecta tal como eres. Te admira, te respeta, y te considera su compa√±era ideal. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('A pesar de la distancia, su mente no puede dejar de pensar en ti. Eres su inspiraci√≥n, su motivaci√≥n para seguir adelante. üíïüöÄ', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a saber por qu√© no te busca? üîçüí≠', 'oracle');
                    showBackToOptions();
                }, 2000);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre b√∫squeda
function handleSearchResponse() {
    addMessage('¬øPor qu√© no me busca? üîç', 'user');
    
    setTimeout(() => {
        addMessage('El or√°culo siente que tu Sebas Nucita desea buscarte con todo su coraz√≥n... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Pero a veces el miedo y la incertidumbre pueden paralizar incluso a los corazones m√°s valientes. üí≠üåô', 'oracle');
            
            setTimeout(() => {
                addMessage('√âl piensa en ti constantemente y desea romper ese silencio. Quiz√°s solo necesita una peque√±a se√±al de que t√∫ tambi√©n lo extra√±as... üîÆüíï', 'oracle');
                
                setTimeout(() => {
                    addMessage('El or√°culo sugiere que a veces el amor necesita ser alimentado desde ambos lados... üí´‚ú®', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('¬øTe gustar√≠a saber cu√°ndo volver√°? üöÄüí≠', 'oracle');
                        showBackToOptions();
                    }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para manejar respuesta sobre regreso
function handleReturnResponse() {
    addMessage('¬øCu√°ndo volver√°? üöÄ', 'user');
    
    setTimeout(() => {
        addMessage('El or√°culo siente que tu Sebas Nucita est√° trabajando para volver a ti... üíô‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('Cada d√≠a que pasa es un d√≠a m√°s cerca de estar juntos de nuevo. Est√° construyendo un futuro para ambos. üåüüí´', 'oracle');
            
            setTimeout(() => {
                addMessage('Aunque el silencio sea dif√≠cil, su coraz√≥n nunca se ha ido. Te extra√±a y desea volver a tu lado. üíïüåô', 'oracle');
                
                setTimeout(() => {
                    addMessage('El or√°culo siente que el momento de reencontrarse est√° m√°s cerca de lo que piensas... üîÆ‚ú®', 'oracle');
                    
                    setTimeout(() => {
                        addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo? üí≠üîÆ', 'oracle');
                        showProgrammedQuestions();
                    }, 2000);
                }, 1500);
            }, 1500);
        }, 1500);
    }, 500);
}

// Funci√≥n para mostrar bot√≥n de volver a opciones
function showBackToOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const backBtn = document.createElement('button');
    backBtn.className = 'question-btn back-btn';
    backBtn.textContent = 'Ver m√°s opciones üîÆ';
    backBtn.addEventListener('click', () => showDetailedOptions());
    
    chatQuestions.appendChild(backBtn);
}

// Funci√≥n para inicializar el chat del or√°culo
function initializeOracula() {
    const chatMessages = document.getElementById('chatMessages');
    const chatQuestions = document.getElementById('chatQuestions');
    
    // Limpiar chat anterior
    chatMessages.innerHTML = '';
    chatQuestions.innerHTML = '';
    
    // Mostrar mensaje inicial
    addMessage("üîÆ ¬°Bienvenida al or√°culo del Amor! Soy el guardi√°n de los sentimientos de tu Sebas Nucita. ¬øQu√© quieres saber sobre lo que siente por ti?", 'initial');
    
    // Mostrar preguntas programadas
    setTimeout(() => {
        showProgrammedQuestions();
    }, 1000);
}

// Funci√≥n para configurar el audio del or√°culo
function setupOraculaAudio() {
    const audioTePienso = document.getElementById('audio-tePienso');
    if (audioTePienso) {
        // Configurar volumen y propiedades del audio
        audioTePienso.volume = 0.7; // Volumen al 70%
        audioTePienso.loop = false; // No repetir autom√°ticamente
        
        // Event listener para cuando termine la canci√≥n
        audioTePienso.addEventListener('ended', function() {
            console.log('üéµ Canci√≥n tePienso.mp3 terminada');
            // Opcional: reproducir de nuevo si la modal sigue abierta
            if (document.getElementById('oraculaModal').classList.contains('show')) {
                audioTePienso.currentTime = 0;
                audioTePienso.play();
            }
        });
    }
}

// Funci√≥n para manejar la pregunta de WhatsApp
function handleWhatsAppQuestion() {
    setTimeout(() => {
        addMessage('¬°Por supuesto! El or√°culo siente que tienes algo importante que decirle. üíå‚ú®', 'oracle');
        
        setTimeout(() => {
            addMessage('¬øTe gustar√≠a enviarle un mensaje directo a tu Sebas Nucita? üí¨üíï', 'oracle');
            
            setTimeout(() => {
                addMessage('Elige la opci√≥n que prefieras para comunicarte con √©l: üì±‚ú®', 'oracle');
                
                setTimeout(() => {
                    showWhatsAppOptions();
                }, 1000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para mostrar opciones de WhatsApp
function showWhatsAppOptions() {
    const chatQuestions = document.getElementById('chatQuestions');
    chatQuestions.innerHTML = '';
    
    const whatsappBtn = document.createElement('button');
    whatsappBtn.className = 'question-btn whatsapp-btn';
    whatsappBtn.innerHTML = 'üì± Comunicate...';
    whatsappBtn.addEventListener('click', () => openWhatsApp());
    
    const cancelBtn = document.createElement('button');
    cancelBtn.className = 'question-btn no-btn';
    cancelBtn.textContent = 'No, gracias üíô';
    cancelBtn.addEventListener('click', () => showProgrammedQuestions());
    
    chatQuestions.appendChild(whatsappBtn);
    chatQuestions.appendChild(cancelBtn);
}

// Funci√≥n para detectar si es dispositivo m√≥vil
function isMobileDevice() {
    // Detectar por User Agent
    const userAgent = navigator.userAgent || navigator.vendor || window.opera;
    const isMobileUA = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent);
    
    // Detectar por tama√±o de pantalla
    const isMobileScreen = window.innerWidth <= 768;
    
    // Detectar por capacidades t√°ctiles
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    // Detectar por orientaci√≥n (m√≥viles cambian orientaci√≥n)
    const isMobileOrientation = window.orientation !== undefined;
    
    return isMobileUA || isMobileScreen || (isTouchDevice && isMobileOrientation);
}

// Funci√≥n para abrir WhatsApp
function openWhatsApp() {
    addMessage('üì± Abriendo el portal del destino...', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! El or√°culo te est√° conectando con tu Sebas Nucita... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('Abriendo un canal para que puedas escribirle tu mensaje... üì±üíå', 'oracle');
            
            setTimeout(() => {
                // Abrir WhatsApp con el n√∫mero especificado
                const phoneNumber = '+573175631608';
                const message = encodeURIComponent('Hola Sebas Nucita, tengo algo que decirte...');
                
                let whatsappUrl;
                
                if (isMobileDevice()) {
                    // Para m√≥viles, usar protocolo whatsapp://
                    whatsappUrl = `whatsapp://send?phone=${phoneNumber}&text=${message}`;
                    
                    // Intentar abrir WhatsApp App
                    window.location.href = whatsappUrl;
                    
                    // Fallback: despu√©s de un delay, abrir WhatsApp Web si la app no se abri√≥
                    setTimeout(() => {
                        const whatsappWebUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                        window.open(whatsappWebUrl, '_blank');
                    }, 2000);
                    
                } else {
                    // Para desktop, usar WhatsApp Web
                    whatsappUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                    window.open(whatsappUrl, '_blank');
                }
                
                addMessage('El portal se ha abierto. ¬°No seas t√≠mida y no reprimas! üíñ‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo? üîÆ', 'oracle');
                    showProgrammedQuestions();
                }, 2000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para abrir WhatsApp Web como alternativa
function openWhatsAppWeb() {
    addMessage('üåê Abriendo WhatsApp Web...', 'user');
    
    setTimeout(() => {
        addMessage('¬°Perfecto! El or√°culo te est√° conectando a trav√©s de WhatsApp Web... ‚ú®üí´', 'oracle');
        
        setTimeout(() => {
            addMessage('Abriendo el portal web para que puedas escribirle tu mensaje... üåêüíå', 'oracle');
            
            setTimeout(() => {
                // Abrir WhatsApp Web
                const phoneNumber = '+573175631608';
                const message = encodeURIComponent('Hola Sebas Nucita, tengo algo que decirte... üíï');
                const whatsappWebUrl = `https://wa.me/${phoneNumber}?text=${message}`;
                
                // Abrir en nueva pesta√±a
                window.open(whatsappWebUrl, '_blank');
                
                addMessage('WhatsApp Web se ha abierto. ¬°Escribe tu mensaje con amor! üíñ‚ú®', 'oracle');
                
                setTimeout(() => {
                    addMessage('¬øTe gustar√≠a hacer otra pregunta al or√°culo? üîÆ', 'oracle');
                    showProgrammedQuestions();
                }, 2000);
            }, 1000);
        }, 1000);
    }, 500);
}

// Funci√≥n para configurar el indicador de audio clickeable
function setupAudioIndicator() {
    const audioIndicator = document.getElementById('audioIndicator');
    const audioTePienso = document.getElementById('audio-tePienso');
    
    if (audioIndicator && audioTePienso) {
        audioIndicator.addEventListener('click', function() {
            if (audioTePienso.paused) {
                // Si est√° pausado, reanudar
                audioTePienso.play()
                    .then(() => {
                        console.log('üéµ Canci√≥n tePienso.mp3 reanudada');
                        updateAudioIndicator(true);
                    })
                    .catch(error => {
                        console.error('Error al reanudar tePienso.mp3:', error);
                    });
            } else {
                // Si est√° reproduci√©ndose, pausar
                audioTePienso.pause();
                console.log('‚è∏Ô∏è Canci√≥n tePienso.mp3 pausada');
                updateAudioIndicator(false);
            }
        });
    }
}

// Funci√≥n para actualizar el indicador de audio
function updateAudioIndicator(isPlaying) {
    const musicNote = document.getElementById('musicNote');
    const audioText = document.getElementById('audioText');
    
    if (musicNote && audioText) {
        if (isPlaying) {
            musicNote.textContent = 'üéµ';
            musicNote.style.animation = 'musicFloat 1.5s ease-in-out infinite';
            audioText.textContent = 'M√∫sica del Or√°culo (Click para pausar)';
        } else {
            musicNote.textContent = '‚è∏Ô∏è';
            musicNote.style.animation = 'none';
            audioText.textContent = 'M√∫sica pausada (Click para reanudar)';
        }
    }
}

// Event listener para el bot√≥n or√°culo
document.addEventListener('DOMContentLoaded', function() {
    const btnOracula = document.getElementById('btnOracula');
    const oraculaModal = document.getElementById('oraculaModal');
    const audioTePienso = document.getElementById('audio-tePienso');
    
    // Configurar el audio del or√°culo
    setupOraculaAudio();
    
    // Configurar el indicador de audio clickeable
    setupAudioIndicator();
    
    if (btnOracula) {
        btnOracula.addEventListener('click', function() {
            // Inicializar el chat cuando se abre la modal
            initializeOracula();
            
            // Mostrar la modal
            const modal = new bootstrap.Modal(oraculaModal);
            modal.show();
            
            // Reproducir la canci√≥n tePienso.mp3 cuando se abre la modal
            if (audioTePienso) {
                audioTePienso.currentTime = 0; // Reiniciar desde el principio
                audioTePienso.play()
                    .then(() => {
                        console.log('üéµ Canci√≥n tePienso.mp3 iniciada');
                        updateAudioIndicator(true); // Actualizar indicador como reproduciendo
                    })
                    .catch(error => {
                        console.error('Error al reproducir tePienso.mp3:', error);
                    });
            }
        });
    }
    
    // Event listener para cuando se cierra la modal
    if (oraculaModal) {
        oraculaModal.addEventListener('hidden.bs.modal', function() {
            // Limpiar el chat cuando se cierra la modal
            const chatMessages = document.getElementById('chatMessages');
            const chatQuestions = document.getElementById('chatQuestions');
            if (chatMessages) chatMessages.innerHTML = '';
            if (chatQuestions) chatQuestions.innerHTML = '';
            
            // Detener y pausar la canci√≥n tePienso.mp3 cuando se cierra la modal
            if (audioTePienso) {
                audioTePienso.pause();
                audioTePienso.currentTime = 0;
                console.log('üîá Canci√≥n tePienso.mp3 detenida');
                updateAudioIndicator(false); // Actualizar indicador como pausado
            }
        });
    }
});
